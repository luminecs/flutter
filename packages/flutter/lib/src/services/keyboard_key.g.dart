import 'package:flutter/foundation.dart';

export 'package:flutter/foundation.dart' show DiagnosticPropertiesBuilder;

// DO NOT EDIT -- DO NOT EDIT -- DO NOT EDIT
// This file is generated by dev/tools/gen_keycodes/bin/gen_keycodes.dart and
// should not be edited directly.
//
// Edit the template dev/tools/gen_keycodes/data/keyboard_key.tmpl instead.
// See dev/tools/gen_keycodes/README.md for more information.

abstract class KeyboardKey with Diagnosticable {
  const KeyboardKey();
}

@immutable
class LogicalKeyboardKey extends KeyboardKey {
  const LogicalKeyboardKey(this.keyId);

  final int keyId;

  // Returns the bits that are not included in [valueMask], shifted to the
  // right.
  //
  // For example, if the input is 0x12abcdabcd, then the result is 0x12.
  //
  // This is mostly equivalent to a right shift, resolving the problem that
  // JavaScript only support 32-bit bitwise operation and needs to use division
  // instead.
  static int _nonValueBits(int n) {
    // `n >> valueMaskWidth` is equivalent to `n / divisorForValueMask`.
    const int divisorForValueMask = valueMask + 1;
    const int valueMaskWidth = 32;

    // Equivalent to assert(divisorForValueMask == (1 << valueMaskWidth)).
    const int firstDivisorWidth = 28;
    assert(divisorForValueMask ==
        (1 << firstDivisorWidth) * (1 << (valueMaskWidth - firstDivisorWidth)));

    // JS only supports up to 2^53 - 1, therefore non-value bits can only
    // contain (maxSafeIntegerWidth - valueMaskWidth) bits.
    const int maxSafeIntegerWidth = 52;
    const int nonValueMask = (1 << (maxSafeIntegerWidth - valueMaskWidth)) - 1;

    if (kIsWeb) {
      return (n / divisorForValueMask).floor() & nonValueMask;
    } else {
      return (n >> valueMaskWidth) & nonValueMask;
    }
  }

  static String? _unicodeKeyLabel(int keyId) {
    if (_nonValueBits(keyId) == 0) {
      return String.fromCharCode(keyId).toUpperCase();
    }
    return null;
  }

  String get keyLabel {
    return _unicodeKeyLabel(keyId) ?? _keyLabels[keyId] ?? '';
  }

  String? get debugName {
    String? result;
    assert(() {
      result = _keyLabels[keyId];
      if (result == null) {
        final String? unicodeKeyLabel = _unicodeKeyLabel(keyId);
        if (unicodeKeyLabel != null) {
          result = 'Key $unicodeKeyLabel';
        } else {
          result = 'Key with ID 0x${keyId.toRadixString(16).padLeft(11, '0')}';
        }
      }
      return true;
    }());
    return result;
  }

  @override
  int get hashCode => keyId.hashCode;

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other.runtimeType != runtimeType) {
      return false;
    }
    return other is LogicalKeyboardKey && other.keyId == keyId;
  }

  static LogicalKeyboardKey? findKeyByKeyId(int keyId) =>
      _knownLogicalKeys[keyId];

  static bool isControlCharacter(String label) {
    if (label.length != 1) {
      return false;
    }
    final int codeUnit = label.codeUnitAt(0);
    return (codeUnit <= 0x1f && codeUnit >= 0x00) ||
        (codeUnit >= 0x7f && codeUnit <= 0x9f);
  }

  bool get isAutogenerated => (keyId & planeMask) >= startOfPlatformPlanes;

  Set<LogicalKeyboardKey> get synonyms {
    final LogicalKeyboardKey? result = _synonyms[this];
    return result == null
        ? <LogicalKeyboardKey>{}
        : <LogicalKeyboardKey>{result};
  }

  static Set<LogicalKeyboardKey> collapseSynonyms(
      Set<LogicalKeyboardKey> input) {
    final Set<LogicalKeyboardKey> result = <LogicalKeyboardKey>{};
    for (final LogicalKeyboardKey key in input) {
      final LogicalKeyboardKey? synonym = _synonyms[key];
      result.add(synonym ?? key);
    }
    return result;
  }

  @override
  void debugFillProperties(DiagnosticPropertiesBuilder properties) {
    super.debugFillProperties(properties);
    properties.add(StringProperty(
        'keyId', '0x${keyId.toRadixString(16).padLeft(8, '0')}'));
    properties.add(StringProperty('keyLabel', keyLabel));
    properties.add(StringProperty('debugName', debugName, defaultValue: null));
  }

  static const int valueMask = 0x000ffffffff;

  static const int planeMask = 0x0ff00000000;

  static const int unicodePlane = 0x00000000000;

  static const int unprintablePlane = 0x00100000000;

  static const int flutterPlane = 0x00200000000;

  static const int startOfPlatformPlanes = 0x01100000000;

  static const int androidPlane = 0x01100000000;

  static const int fuchsiaPlane = 0x01200000000;

  static const int iosPlane = 0x01300000000;

  static const int macosPlane = 0x01400000000;

  static const int gtkPlane = 0x01500000000;

  static const int windowsPlane = 0x01600000000;

  static const int webPlane = 0x01700000000;

  static const int glfwPlane = 0x01800000000;

  static const LogicalKeyboardKey space = LogicalKeyboardKey(0x00000000020);

  static const LogicalKeyboardKey exclamation =
      LogicalKeyboardKey(0x00000000021);

  static const LogicalKeyboardKey quote = LogicalKeyboardKey(0x00000000022);

  static const LogicalKeyboardKey numberSign =
      LogicalKeyboardKey(0x00000000023);

  static const LogicalKeyboardKey dollar = LogicalKeyboardKey(0x00000000024);

  static const LogicalKeyboardKey percent = LogicalKeyboardKey(0x00000000025);

  static const LogicalKeyboardKey ampersand = LogicalKeyboardKey(0x00000000026);

  static const LogicalKeyboardKey quoteSingle =
      LogicalKeyboardKey(0x00000000027);

  static const LogicalKeyboardKey parenthesisLeft =
      LogicalKeyboardKey(0x00000000028);

  static const LogicalKeyboardKey parenthesisRight =
      LogicalKeyboardKey(0x00000000029);

  static const LogicalKeyboardKey asterisk = LogicalKeyboardKey(0x0000000002a);

  static const LogicalKeyboardKey add = LogicalKeyboardKey(0x0000000002b);

  static const LogicalKeyboardKey comma = LogicalKeyboardKey(0x0000000002c);

  static const LogicalKeyboardKey minus = LogicalKeyboardKey(0x0000000002d);

  static const LogicalKeyboardKey period = LogicalKeyboardKey(0x0000000002e);

  static const LogicalKeyboardKey slash = LogicalKeyboardKey(0x0000000002f);

  static const LogicalKeyboardKey digit0 = LogicalKeyboardKey(0x00000000030);

  static const LogicalKeyboardKey digit1 = LogicalKeyboardKey(0x00000000031);

  static const LogicalKeyboardKey digit2 = LogicalKeyboardKey(0x00000000032);

  static const LogicalKeyboardKey digit3 = LogicalKeyboardKey(0x00000000033);

  static const LogicalKeyboardKey digit4 = LogicalKeyboardKey(0x00000000034);

  static const LogicalKeyboardKey digit5 = LogicalKeyboardKey(0x00000000035);

  static const LogicalKeyboardKey digit6 = LogicalKeyboardKey(0x00000000036);

  static const LogicalKeyboardKey digit7 = LogicalKeyboardKey(0x00000000037);

  static const LogicalKeyboardKey digit8 = LogicalKeyboardKey(0x00000000038);

  static const LogicalKeyboardKey digit9 = LogicalKeyboardKey(0x00000000039);

  static const LogicalKeyboardKey colon = LogicalKeyboardKey(0x0000000003a);

  static const LogicalKeyboardKey semicolon = LogicalKeyboardKey(0x0000000003b);

  static const LogicalKeyboardKey less = LogicalKeyboardKey(0x0000000003c);

  static const LogicalKeyboardKey equal = LogicalKeyboardKey(0x0000000003d);

  static const LogicalKeyboardKey greater = LogicalKeyboardKey(0x0000000003e);

  static const LogicalKeyboardKey question = LogicalKeyboardKey(0x0000000003f);

  static const LogicalKeyboardKey at = LogicalKeyboardKey(0x00000000040);

  static const LogicalKeyboardKey bracketLeft =
      LogicalKeyboardKey(0x0000000005b);

  static const LogicalKeyboardKey backslash = LogicalKeyboardKey(0x0000000005c);

  static const LogicalKeyboardKey bracketRight =
      LogicalKeyboardKey(0x0000000005d);

  static const LogicalKeyboardKey caret = LogicalKeyboardKey(0x0000000005e);

  static const LogicalKeyboardKey underscore =
      LogicalKeyboardKey(0x0000000005f);

  static const LogicalKeyboardKey backquote = LogicalKeyboardKey(0x00000000060);

  static const LogicalKeyboardKey keyA = LogicalKeyboardKey(0x00000000061);

  static const LogicalKeyboardKey keyB = LogicalKeyboardKey(0x00000000062);

  static const LogicalKeyboardKey keyC = LogicalKeyboardKey(0x00000000063);

  static const LogicalKeyboardKey keyD = LogicalKeyboardKey(0x00000000064);

  static const LogicalKeyboardKey keyE = LogicalKeyboardKey(0x00000000065);

  static const LogicalKeyboardKey keyF = LogicalKeyboardKey(0x00000000066);

  static const LogicalKeyboardKey keyG = LogicalKeyboardKey(0x00000000067);

  static const LogicalKeyboardKey keyH = LogicalKeyboardKey(0x00000000068);

  static const LogicalKeyboardKey keyI = LogicalKeyboardKey(0x00000000069);

  static const LogicalKeyboardKey keyJ = LogicalKeyboardKey(0x0000000006a);

  static const LogicalKeyboardKey keyK = LogicalKeyboardKey(0x0000000006b);

  static const LogicalKeyboardKey keyL = LogicalKeyboardKey(0x0000000006c);

  static const LogicalKeyboardKey keyM = LogicalKeyboardKey(0x0000000006d);

  static const LogicalKeyboardKey keyN = LogicalKeyboardKey(0x0000000006e);

  static const LogicalKeyboardKey keyO = LogicalKeyboardKey(0x0000000006f);

  static const LogicalKeyboardKey keyP = LogicalKeyboardKey(0x00000000070);

  static const LogicalKeyboardKey keyQ = LogicalKeyboardKey(0x00000000071);

  static const LogicalKeyboardKey keyR = LogicalKeyboardKey(0x00000000072);

  static const LogicalKeyboardKey keyS = LogicalKeyboardKey(0x00000000073);

  static const LogicalKeyboardKey keyT = LogicalKeyboardKey(0x00000000074);

  static const LogicalKeyboardKey keyU = LogicalKeyboardKey(0x00000000075);

  static const LogicalKeyboardKey keyV = LogicalKeyboardKey(0x00000000076);

  static const LogicalKeyboardKey keyW = LogicalKeyboardKey(0x00000000077);

  static const LogicalKeyboardKey keyX = LogicalKeyboardKey(0x00000000078);

  static const LogicalKeyboardKey keyY = LogicalKeyboardKey(0x00000000079);

  static const LogicalKeyboardKey keyZ = LogicalKeyboardKey(0x0000000007a);

  static const LogicalKeyboardKey braceLeft = LogicalKeyboardKey(0x0000000007b);

  static const LogicalKeyboardKey bar = LogicalKeyboardKey(0x0000000007c);

  static const LogicalKeyboardKey braceRight =
      LogicalKeyboardKey(0x0000000007d);

  static const LogicalKeyboardKey tilde = LogicalKeyboardKey(0x0000000007e);

  static const LogicalKeyboardKey unidentified =
      LogicalKeyboardKey(0x00100000001);

  static const LogicalKeyboardKey backspace = LogicalKeyboardKey(0x00100000008);

  static const LogicalKeyboardKey tab = LogicalKeyboardKey(0x00100000009);

  static const LogicalKeyboardKey enter = LogicalKeyboardKey(0x0010000000d);

  static const LogicalKeyboardKey escape = LogicalKeyboardKey(0x0010000001b);

  static const LogicalKeyboardKey delete = LogicalKeyboardKey(0x0010000007f);

  static const LogicalKeyboardKey accel = LogicalKeyboardKey(0x00100000101);

  static const LogicalKeyboardKey altGraph = LogicalKeyboardKey(0x00100000103);

  static const LogicalKeyboardKey capsLock = LogicalKeyboardKey(0x00100000104);

  static const LogicalKeyboardKey fn = LogicalKeyboardKey(0x00100000106);

  static const LogicalKeyboardKey fnLock = LogicalKeyboardKey(0x00100000107);

  static const LogicalKeyboardKey hyper = LogicalKeyboardKey(0x00100000108);

  static const LogicalKeyboardKey numLock = LogicalKeyboardKey(0x0010000010a);

  static const LogicalKeyboardKey scrollLock =
      LogicalKeyboardKey(0x0010000010c);

  static const LogicalKeyboardKey superKey = LogicalKeyboardKey(0x0010000010e);

  static const LogicalKeyboardKey symbol = LogicalKeyboardKey(0x0010000010f);

  static const LogicalKeyboardKey symbolLock =
      LogicalKeyboardKey(0x00100000110);

  static const LogicalKeyboardKey shiftLevel5 =
      LogicalKeyboardKey(0x00100000111);

  static const LogicalKeyboardKey arrowDown = LogicalKeyboardKey(0x00100000301);

  static const LogicalKeyboardKey arrowLeft = LogicalKeyboardKey(0x00100000302);

  static const LogicalKeyboardKey arrowRight =
      LogicalKeyboardKey(0x00100000303);

  static const LogicalKeyboardKey arrowUp = LogicalKeyboardKey(0x00100000304);

  static const LogicalKeyboardKey end = LogicalKeyboardKey(0x00100000305);

  static const LogicalKeyboardKey home = LogicalKeyboardKey(0x00100000306);

  static const LogicalKeyboardKey pageDown = LogicalKeyboardKey(0x00100000307);

  static const LogicalKeyboardKey pageUp = LogicalKeyboardKey(0x00100000308);

  static const LogicalKeyboardKey clear = LogicalKeyboardKey(0x00100000401);

  static const LogicalKeyboardKey copy = LogicalKeyboardKey(0x00100000402);

  static const LogicalKeyboardKey crSel = LogicalKeyboardKey(0x00100000403);

  static const LogicalKeyboardKey cut = LogicalKeyboardKey(0x00100000404);

  static const LogicalKeyboardKey eraseEof = LogicalKeyboardKey(0x00100000405);

  static const LogicalKeyboardKey exSel = LogicalKeyboardKey(0x00100000406);

  static const LogicalKeyboardKey insert = LogicalKeyboardKey(0x00100000407);

  static const LogicalKeyboardKey paste = LogicalKeyboardKey(0x00100000408);

  static const LogicalKeyboardKey redo = LogicalKeyboardKey(0x00100000409);

  static const LogicalKeyboardKey undo = LogicalKeyboardKey(0x0010000040a);

  static const LogicalKeyboardKey accept = LogicalKeyboardKey(0x00100000501);

  static const LogicalKeyboardKey again = LogicalKeyboardKey(0x00100000502);

  static const LogicalKeyboardKey attn = LogicalKeyboardKey(0x00100000503);

  static const LogicalKeyboardKey cancel = LogicalKeyboardKey(0x00100000504);

  static const LogicalKeyboardKey contextMenu =
      LogicalKeyboardKey(0x00100000505);

  static const LogicalKeyboardKey execute = LogicalKeyboardKey(0x00100000506);

  static const LogicalKeyboardKey find = LogicalKeyboardKey(0x00100000507);

  static const LogicalKeyboardKey help = LogicalKeyboardKey(0x00100000508);

  static const LogicalKeyboardKey pause = LogicalKeyboardKey(0x00100000509);

  static const LogicalKeyboardKey play = LogicalKeyboardKey(0x0010000050a);

  static const LogicalKeyboardKey props = LogicalKeyboardKey(0x0010000050b);

  static const LogicalKeyboardKey select = LogicalKeyboardKey(0x0010000050c);

  static const LogicalKeyboardKey zoomIn = LogicalKeyboardKey(0x0010000050d);

  static const LogicalKeyboardKey zoomOut = LogicalKeyboardKey(0x0010000050e);

  static const LogicalKeyboardKey brightnessDown =
      LogicalKeyboardKey(0x00100000601);

  static const LogicalKeyboardKey brightnessUp =
      LogicalKeyboardKey(0x00100000602);

  static const LogicalKeyboardKey camera = LogicalKeyboardKey(0x00100000603);

  static const LogicalKeyboardKey eject = LogicalKeyboardKey(0x00100000604);

  static const LogicalKeyboardKey logOff = LogicalKeyboardKey(0x00100000605);

  static const LogicalKeyboardKey power = LogicalKeyboardKey(0x00100000606);

  static const LogicalKeyboardKey powerOff = LogicalKeyboardKey(0x00100000607);

  static const LogicalKeyboardKey printScreen =
      LogicalKeyboardKey(0x00100000608);

  static const LogicalKeyboardKey hibernate = LogicalKeyboardKey(0x00100000609);

  static const LogicalKeyboardKey standby = LogicalKeyboardKey(0x0010000060a);

  static const LogicalKeyboardKey wakeUp = LogicalKeyboardKey(0x0010000060b);

  static const LogicalKeyboardKey allCandidates =
      LogicalKeyboardKey(0x00100000701);

  static const LogicalKeyboardKey alphanumeric =
      LogicalKeyboardKey(0x00100000702);

  static const LogicalKeyboardKey codeInput = LogicalKeyboardKey(0x00100000703);

  static const LogicalKeyboardKey compose = LogicalKeyboardKey(0x00100000704);

  static const LogicalKeyboardKey convert = LogicalKeyboardKey(0x00100000705);

  static const LogicalKeyboardKey finalMode = LogicalKeyboardKey(0x00100000706);

  static const LogicalKeyboardKey groupFirst =
      LogicalKeyboardKey(0x00100000707);

  static const LogicalKeyboardKey groupLast = LogicalKeyboardKey(0x00100000708);

  static const LogicalKeyboardKey groupNext = LogicalKeyboardKey(0x00100000709);

  static const LogicalKeyboardKey groupPrevious =
      LogicalKeyboardKey(0x0010000070a);

  static const LogicalKeyboardKey modeChange =
      LogicalKeyboardKey(0x0010000070b);

  static const LogicalKeyboardKey nextCandidate =
      LogicalKeyboardKey(0x0010000070c);

  static const LogicalKeyboardKey nonConvert =
      LogicalKeyboardKey(0x0010000070d);

  static const LogicalKeyboardKey previousCandidate =
      LogicalKeyboardKey(0x0010000070e);

  static const LogicalKeyboardKey process = LogicalKeyboardKey(0x0010000070f);

  static const LogicalKeyboardKey singleCandidate =
      LogicalKeyboardKey(0x00100000710);

  static const LogicalKeyboardKey hangulMode =
      LogicalKeyboardKey(0x00100000711);

  static const LogicalKeyboardKey hanjaMode = LogicalKeyboardKey(0x00100000712);

  static const LogicalKeyboardKey junjaMode = LogicalKeyboardKey(0x00100000713);

  static const LogicalKeyboardKey eisu = LogicalKeyboardKey(0x00100000714);

  static const LogicalKeyboardKey hankaku = LogicalKeyboardKey(0x00100000715);

  static const LogicalKeyboardKey hiragana = LogicalKeyboardKey(0x00100000716);

  static const LogicalKeyboardKey hiraganaKatakana =
      LogicalKeyboardKey(0x00100000717);

  static const LogicalKeyboardKey kanaMode = LogicalKeyboardKey(0x00100000718);

  static const LogicalKeyboardKey kanjiMode = LogicalKeyboardKey(0x00100000719);

  static const LogicalKeyboardKey katakana = LogicalKeyboardKey(0x0010000071a);

  static const LogicalKeyboardKey romaji = LogicalKeyboardKey(0x0010000071b);

  static const LogicalKeyboardKey zenkaku = LogicalKeyboardKey(0x0010000071c);

  static const LogicalKeyboardKey zenkakuHankaku =
      LogicalKeyboardKey(0x0010000071d);

  static const LogicalKeyboardKey f1 = LogicalKeyboardKey(0x00100000801);

  static const LogicalKeyboardKey f2 = LogicalKeyboardKey(0x00100000802);

  static const LogicalKeyboardKey f3 = LogicalKeyboardKey(0x00100000803);

  static const LogicalKeyboardKey f4 = LogicalKeyboardKey(0x00100000804);

  static const LogicalKeyboardKey f5 = LogicalKeyboardKey(0x00100000805);

  static const LogicalKeyboardKey f6 = LogicalKeyboardKey(0x00100000806);

  static const LogicalKeyboardKey f7 = LogicalKeyboardKey(0x00100000807);

  static const LogicalKeyboardKey f8 = LogicalKeyboardKey(0x00100000808);

  static const LogicalKeyboardKey f9 = LogicalKeyboardKey(0x00100000809);

  static const LogicalKeyboardKey f10 = LogicalKeyboardKey(0x0010000080a);

  static const LogicalKeyboardKey f11 = LogicalKeyboardKey(0x0010000080b);

  static const LogicalKeyboardKey f12 = LogicalKeyboardKey(0x0010000080c);

  static const LogicalKeyboardKey f13 = LogicalKeyboardKey(0x0010000080d);

  static const LogicalKeyboardKey f14 = LogicalKeyboardKey(0x0010000080e);

  static const LogicalKeyboardKey f15 = LogicalKeyboardKey(0x0010000080f);

  static const LogicalKeyboardKey f16 = LogicalKeyboardKey(0x00100000810);

  static const LogicalKeyboardKey f17 = LogicalKeyboardKey(0x00100000811);

  static const LogicalKeyboardKey f18 = LogicalKeyboardKey(0x00100000812);

  static const LogicalKeyboardKey f19 = LogicalKeyboardKey(0x00100000813);

  static const LogicalKeyboardKey f20 = LogicalKeyboardKey(0x00100000814);

  static const LogicalKeyboardKey f21 = LogicalKeyboardKey(0x00100000815);

  static const LogicalKeyboardKey f22 = LogicalKeyboardKey(0x00100000816);

  static const LogicalKeyboardKey f23 = LogicalKeyboardKey(0x00100000817);

  static const LogicalKeyboardKey f24 = LogicalKeyboardKey(0x00100000818);

  static const LogicalKeyboardKey soft1 = LogicalKeyboardKey(0x00100000901);

  static const LogicalKeyboardKey soft2 = LogicalKeyboardKey(0x00100000902);

  static const LogicalKeyboardKey soft3 = LogicalKeyboardKey(0x00100000903);

  static const LogicalKeyboardKey soft4 = LogicalKeyboardKey(0x00100000904);

  static const LogicalKeyboardKey soft5 = LogicalKeyboardKey(0x00100000905);

  static const LogicalKeyboardKey soft6 = LogicalKeyboardKey(0x00100000906);

  static const LogicalKeyboardKey soft7 = LogicalKeyboardKey(0x00100000907);

  static const LogicalKeyboardKey soft8 = LogicalKeyboardKey(0x00100000908);

  static const LogicalKeyboardKey close = LogicalKeyboardKey(0x00100000a01);

  static const LogicalKeyboardKey mailForward =
      LogicalKeyboardKey(0x00100000a02);

  static const LogicalKeyboardKey mailReply = LogicalKeyboardKey(0x00100000a03);

  static const LogicalKeyboardKey mailSend = LogicalKeyboardKey(0x00100000a04);

  static const LogicalKeyboardKey mediaPlayPause =
      LogicalKeyboardKey(0x00100000a05);

  static const LogicalKeyboardKey mediaStop = LogicalKeyboardKey(0x00100000a07);

  static const LogicalKeyboardKey mediaTrackNext =
      LogicalKeyboardKey(0x00100000a08);

  static const LogicalKeyboardKey mediaTrackPrevious =
      LogicalKeyboardKey(0x00100000a09);

  static const LogicalKeyboardKey newKey = LogicalKeyboardKey(0x00100000a0a);

  static const LogicalKeyboardKey open = LogicalKeyboardKey(0x00100000a0b);

  static const LogicalKeyboardKey print = LogicalKeyboardKey(0x00100000a0c);

  static const LogicalKeyboardKey save = LogicalKeyboardKey(0x00100000a0d);

  static const LogicalKeyboardKey spellCheck =
      LogicalKeyboardKey(0x00100000a0e);

  static const LogicalKeyboardKey audioVolumeDown =
      LogicalKeyboardKey(0x00100000a0f);

  static const LogicalKeyboardKey audioVolumeUp =
      LogicalKeyboardKey(0x00100000a10);

  static const LogicalKeyboardKey audioVolumeMute =
      LogicalKeyboardKey(0x00100000a11);

  static const LogicalKeyboardKey launchApplication2 =
      LogicalKeyboardKey(0x00100000b01);

  static const LogicalKeyboardKey launchCalendar =
      LogicalKeyboardKey(0x00100000b02);

  static const LogicalKeyboardKey launchMail =
      LogicalKeyboardKey(0x00100000b03);

  static const LogicalKeyboardKey launchMediaPlayer =
      LogicalKeyboardKey(0x00100000b04);

  static const LogicalKeyboardKey launchMusicPlayer =
      LogicalKeyboardKey(0x00100000b05);

  static const LogicalKeyboardKey launchApplication1 =
      LogicalKeyboardKey(0x00100000b06);

  static const LogicalKeyboardKey launchScreenSaver =
      LogicalKeyboardKey(0x00100000b07);

  static const LogicalKeyboardKey launchSpreadsheet =
      LogicalKeyboardKey(0x00100000b08);

  static const LogicalKeyboardKey launchWebBrowser =
      LogicalKeyboardKey(0x00100000b09);

  static const LogicalKeyboardKey launchWebCam =
      LogicalKeyboardKey(0x00100000b0a);

  static const LogicalKeyboardKey launchWordProcessor =
      LogicalKeyboardKey(0x00100000b0b);

  static const LogicalKeyboardKey launchContacts =
      LogicalKeyboardKey(0x00100000b0c);

  static const LogicalKeyboardKey launchPhone =
      LogicalKeyboardKey(0x00100000b0d);

  static const LogicalKeyboardKey launchAssistant =
      LogicalKeyboardKey(0x00100000b0e);

  static const LogicalKeyboardKey launchControlPanel =
      LogicalKeyboardKey(0x00100000b0f);

  static const LogicalKeyboardKey browserBack =
      LogicalKeyboardKey(0x00100000c01);

  static const LogicalKeyboardKey browserFavorites =
      LogicalKeyboardKey(0x00100000c02);

  static const LogicalKeyboardKey browserForward =
      LogicalKeyboardKey(0x00100000c03);

  static const LogicalKeyboardKey browserHome =
      LogicalKeyboardKey(0x00100000c04);

  static const LogicalKeyboardKey browserRefresh =
      LogicalKeyboardKey(0x00100000c05);

  static const LogicalKeyboardKey browserSearch =
      LogicalKeyboardKey(0x00100000c06);

  static const LogicalKeyboardKey browserStop =
      LogicalKeyboardKey(0x00100000c07);

  static const LogicalKeyboardKey audioBalanceLeft =
      LogicalKeyboardKey(0x00100000d01);

  static const LogicalKeyboardKey audioBalanceRight =
      LogicalKeyboardKey(0x00100000d02);

  static const LogicalKeyboardKey audioBassBoostDown =
      LogicalKeyboardKey(0x00100000d03);

  static const LogicalKeyboardKey audioBassBoostUp =
      LogicalKeyboardKey(0x00100000d04);

  static const LogicalKeyboardKey audioFaderFront =
      LogicalKeyboardKey(0x00100000d05);

  static const LogicalKeyboardKey audioFaderRear =
      LogicalKeyboardKey(0x00100000d06);

  static const LogicalKeyboardKey audioSurroundModeNext =
      LogicalKeyboardKey(0x00100000d07);

  static const LogicalKeyboardKey avrInput = LogicalKeyboardKey(0x00100000d08);

  static const LogicalKeyboardKey avrPower = LogicalKeyboardKey(0x00100000d09);

  static const LogicalKeyboardKey channelDown =
      LogicalKeyboardKey(0x00100000d0a);

  static const LogicalKeyboardKey channelUp = LogicalKeyboardKey(0x00100000d0b);

  static const LogicalKeyboardKey colorF0Red =
      LogicalKeyboardKey(0x00100000d0c);

  static const LogicalKeyboardKey colorF1Green =
      LogicalKeyboardKey(0x00100000d0d);

  static const LogicalKeyboardKey colorF2Yellow =
      LogicalKeyboardKey(0x00100000d0e);

  static const LogicalKeyboardKey colorF3Blue =
      LogicalKeyboardKey(0x00100000d0f);

  static const LogicalKeyboardKey colorF4Grey =
      LogicalKeyboardKey(0x00100000d10);

  static const LogicalKeyboardKey colorF5Brown =
      LogicalKeyboardKey(0x00100000d11);

  static const LogicalKeyboardKey closedCaptionToggle =
      LogicalKeyboardKey(0x00100000d12);

  static const LogicalKeyboardKey dimmer = LogicalKeyboardKey(0x00100000d13);

  static const LogicalKeyboardKey displaySwap =
      LogicalKeyboardKey(0x00100000d14);

  static const LogicalKeyboardKey exit = LogicalKeyboardKey(0x00100000d15);

  static const LogicalKeyboardKey favoriteClear0 =
      LogicalKeyboardKey(0x00100000d16);

  static const LogicalKeyboardKey favoriteClear1 =
      LogicalKeyboardKey(0x00100000d17);

  static const LogicalKeyboardKey favoriteClear2 =
      LogicalKeyboardKey(0x00100000d18);

  static const LogicalKeyboardKey favoriteClear3 =
      LogicalKeyboardKey(0x00100000d19);

  static const LogicalKeyboardKey favoriteRecall0 =
      LogicalKeyboardKey(0x00100000d1a);

  static const LogicalKeyboardKey favoriteRecall1 =
      LogicalKeyboardKey(0x00100000d1b);

  static const LogicalKeyboardKey favoriteRecall2 =
      LogicalKeyboardKey(0x00100000d1c);

  static const LogicalKeyboardKey favoriteRecall3 =
      LogicalKeyboardKey(0x00100000d1d);

  static const LogicalKeyboardKey favoriteStore0 =
      LogicalKeyboardKey(0x00100000d1e);

  static const LogicalKeyboardKey favoriteStore1 =
      LogicalKeyboardKey(0x00100000d1f);

  static const LogicalKeyboardKey favoriteStore2 =
      LogicalKeyboardKey(0x00100000d20);

  static const LogicalKeyboardKey favoriteStore3 =
      LogicalKeyboardKey(0x00100000d21);

  static const LogicalKeyboardKey guide = LogicalKeyboardKey(0x00100000d22);

  static const LogicalKeyboardKey guideNextDay =
      LogicalKeyboardKey(0x00100000d23);

  static const LogicalKeyboardKey guidePreviousDay =
      LogicalKeyboardKey(0x00100000d24);

  static const LogicalKeyboardKey info = LogicalKeyboardKey(0x00100000d25);

  static const LogicalKeyboardKey instantReplay =
      LogicalKeyboardKey(0x00100000d26);

  static const LogicalKeyboardKey link = LogicalKeyboardKey(0x00100000d27);

  static const LogicalKeyboardKey listProgram =
      LogicalKeyboardKey(0x00100000d28);

  static const LogicalKeyboardKey liveContent =
      LogicalKeyboardKey(0x00100000d29);

  static const LogicalKeyboardKey lock = LogicalKeyboardKey(0x00100000d2a);

  static const LogicalKeyboardKey mediaApps = LogicalKeyboardKey(0x00100000d2b);

  static const LogicalKeyboardKey mediaFastForward =
      LogicalKeyboardKey(0x00100000d2c);

  static const LogicalKeyboardKey mediaLast = LogicalKeyboardKey(0x00100000d2d);

  static const LogicalKeyboardKey mediaPause =
      LogicalKeyboardKey(0x00100000d2e);

  static const LogicalKeyboardKey mediaPlay = LogicalKeyboardKey(0x00100000d2f);

  static const LogicalKeyboardKey mediaRecord =
      LogicalKeyboardKey(0x00100000d30);

  static const LogicalKeyboardKey mediaRewind =
      LogicalKeyboardKey(0x00100000d31);

  static const LogicalKeyboardKey mediaSkip = LogicalKeyboardKey(0x00100000d32);

  static const LogicalKeyboardKey nextFavoriteChannel =
      LogicalKeyboardKey(0x00100000d33);

  static const LogicalKeyboardKey nextUserProfile =
      LogicalKeyboardKey(0x00100000d34);

  static const LogicalKeyboardKey onDemand = LogicalKeyboardKey(0x00100000d35);

  static const LogicalKeyboardKey pInPDown = LogicalKeyboardKey(0x00100000d36);

  static const LogicalKeyboardKey pInPMove = LogicalKeyboardKey(0x00100000d37);

  static const LogicalKeyboardKey pInPToggle =
      LogicalKeyboardKey(0x00100000d38);

  static const LogicalKeyboardKey pInPUp = LogicalKeyboardKey(0x00100000d39);

  static const LogicalKeyboardKey playSpeedDown =
      LogicalKeyboardKey(0x00100000d3a);

  static const LogicalKeyboardKey playSpeedReset =
      LogicalKeyboardKey(0x00100000d3b);

  static const LogicalKeyboardKey playSpeedUp =
      LogicalKeyboardKey(0x00100000d3c);

  static const LogicalKeyboardKey randomToggle =
      LogicalKeyboardKey(0x00100000d3d);

  static const LogicalKeyboardKey rcLowBattery =
      LogicalKeyboardKey(0x00100000d3e);

  static const LogicalKeyboardKey recordSpeedNext =
      LogicalKeyboardKey(0x00100000d3f);

  static const LogicalKeyboardKey rfBypass = LogicalKeyboardKey(0x00100000d40);

  static const LogicalKeyboardKey scanChannelsToggle =
      LogicalKeyboardKey(0x00100000d41);

  static const LogicalKeyboardKey screenModeNext =
      LogicalKeyboardKey(0x00100000d42);

  static const LogicalKeyboardKey settings = LogicalKeyboardKey(0x00100000d43);

  static const LogicalKeyboardKey splitScreenToggle =
      LogicalKeyboardKey(0x00100000d44);

  static const LogicalKeyboardKey stbInput = LogicalKeyboardKey(0x00100000d45);

  static const LogicalKeyboardKey stbPower = LogicalKeyboardKey(0x00100000d46);

  static const LogicalKeyboardKey subtitle = LogicalKeyboardKey(0x00100000d47);

  static const LogicalKeyboardKey teletext = LogicalKeyboardKey(0x00100000d48);

  static const LogicalKeyboardKey tv = LogicalKeyboardKey(0x00100000d49);

  static const LogicalKeyboardKey tvInput = LogicalKeyboardKey(0x00100000d4a);

  static const LogicalKeyboardKey tvPower = LogicalKeyboardKey(0x00100000d4b);

  static const LogicalKeyboardKey videoModeNext =
      LogicalKeyboardKey(0x00100000d4c);

  static const LogicalKeyboardKey wink = LogicalKeyboardKey(0x00100000d4d);

  static const LogicalKeyboardKey zoomToggle =
      LogicalKeyboardKey(0x00100000d4e);

  static const LogicalKeyboardKey dvr = LogicalKeyboardKey(0x00100000d4f);

  static const LogicalKeyboardKey mediaAudioTrack =
      LogicalKeyboardKey(0x00100000d50);

  static const LogicalKeyboardKey mediaSkipBackward =
      LogicalKeyboardKey(0x00100000d51);

  static const LogicalKeyboardKey mediaSkipForward =
      LogicalKeyboardKey(0x00100000d52);

  static const LogicalKeyboardKey mediaStepBackward =
      LogicalKeyboardKey(0x00100000d53);

  static const LogicalKeyboardKey mediaStepForward =
      LogicalKeyboardKey(0x00100000d54);

  static const LogicalKeyboardKey mediaTopMenu =
      LogicalKeyboardKey(0x00100000d55);

  static const LogicalKeyboardKey navigateIn =
      LogicalKeyboardKey(0x00100000d56);

  static const LogicalKeyboardKey navigateNext =
      LogicalKeyboardKey(0x00100000d57);

  static const LogicalKeyboardKey navigateOut =
      LogicalKeyboardKey(0x00100000d58);

  static const LogicalKeyboardKey navigatePrevious =
      LogicalKeyboardKey(0x00100000d59);

  static const LogicalKeyboardKey pairing = LogicalKeyboardKey(0x00100000d5a);

  static const LogicalKeyboardKey mediaClose =
      LogicalKeyboardKey(0x00100000d5b);

  static const LogicalKeyboardKey audioBassBoostToggle =
      LogicalKeyboardKey(0x00100000e02);

  static const LogicalKeyboardKey audioTrebleDown =
      LogicalKeyboardKey(0x00100000e04);

  static const LogicalKeyboardKey audioTrebleUp =
      LogicalKeyboardKey(0x00100000e05);

  static const LogicalKeyboardKey microphoneToggle =
      LogicalKeyboardKey(0x00100000e06);

  static const LogicalKeyboardKey microphoneVolumeDown =
      LogicalKeyboardKey(0x00100000e07);

  static const LogicalKeyboardKey microphoneVolumeUp =
      LogicalKeyboardKey(0x00100000e08);

  static const LogicalKeyboardKey microphoneVolumeMute =
      LogicalKeyboardKey(0x00100000e09);

  static const LogicalKeyboardKey speechCorrectionList =
      LogicalKeyboardKey(0x00100000f01);

  static const LogicalKeyboardKey speechInputToggle =
      LogicalKeyboardKey(0x00100000f02);

  static const LogicalKeyboardKey appSwitch = LogicalKeyboardKey(0x00100001001);

  static const LogicalKeyboardKey call = LogicalKeyboardKey(0x00100001002);

  static const LogicalKeyboardKey cameraFocus =
      LogicalKeyboardKey(0x00100001003);

  static const LogicalKeyboardKey endCall = LogicalKeyboardKey(0x00100001004);

  static const LogicalKeyboardKey goBack = LogicalKeyboardKey(0x00100001005);

  static const LogicalKeyboardKey goHome = LogicalKeyboardKey(0x00100001006);

  static const LogicalKeyboardKey headsetHook =
      LogicalKeyboardKey(0x00100001007);

  static const LogicalKeyboardKey lastNumberRedial =
      LogicalKeyboardKey(0x00100001008);

  static const LogicalKeyboardKey notification =
      LogicalKeyboardKey(0x00100001009);

  static const LogicalKeyboardKey mannerMode =
      LogicalKeyboardKey(0x0010000100a);

  static const LogicalKeyboardKey voiceDial = LogicalKeyboardKey(0x0010000100b);

  static const LogicalKeyboardKey tv3DMode = LogicalKeyboardKey(0x00100001101);

  static const LogicalKeyboardKey tvAntennaCable =
      LogicalKeyboardKey(0x00100001102);

  static const LogicalKeyboardKey tvAudioDescription =
      LogicalKeyboardKey(0x00100001103);

  static const LogicalKeyboardKey tvAudioDescriptionMixDown =
      LogicalKeyboardKey(0x00100001104);

  static const LogicalKeyboardKey tvAudioDescriptionMixUp =
      LogicalKeyboardKey(0x00100001105);

  static const LogicalKeyboardKey tvContentsMenu =
      LogicalKeyboardKey(0x00100001106);

  static const LogicalKeyboardKey tvDataService =
      LogicalKeyboardKey(0x00100001107);

  static const LogicalKeyboardKey tvInputComponent1 =
      LogicalKeyboardKey(0x00100001108);

  static const LogicalKeyboardKey tvInputComponent2 =
      LogicalKeyboardKey(0x00100001109);

  static const LogicalKeyboardKey tvInputComposite1 =
      LogicalKeyboardKey(0x0010000110a);

  static const LogicalKeyboardKey tvInputComposite2 =
      LogicalKeyboardKey(0x0010000110b);

  static const LogicalKeyboardKey tvInputHDMI1 =
      LogicalKeyboardKey(0x0010000110c);

  static const LogicalKeyboardKey tvInputHDMI2 =
      LogicalKeyboardKey(0x0010000110d);

  static const LogicalKeyboardKey tvInputHDMI3 =
      LogicalKeyboardKey(0x0010000110e);

  static const LogicalKeyboardKey tvInputHDMI4 =
      LogicalKeyboardKey(0x0010000110f);

  static const LogicalKeyboardKey tvInputVGA1 =
      LogicalKeyboardKey(0x00100001110);

  static const LogicalKeyboardKey tvMediaContext =
      LogicalKeyboardKey(0x00100001111);

  static const LogicalKeyboardKey tvNetwork = LogicalKeyboardKey(0x00100001112);

  static const LogicalKeyboardKey tvNumberEntry =
      LogicalKeyboardKey(0x00100001113);

  static const LogicalKeyboardKey tvRadioService =
      LogicalKeyboardKey(0x00100001114);

  static const LogicalKeyboardKey tvSatellite =
      LogicalKeyboardKey(0x00100001115);

  static const LogicalKeyboardKey tvSatelliteBS =
      LogicalKeyboardKey(0x00100001116);

  static const LogicalKeyboardKey tvSatelliteCS =
      LogicalKeyboardKey(0x00100001117);

  static const LogicalKeyboardKey tvSatelliteToggle =
      LogicalKeyboardKey(0x00100001118);

  static const LogicalKeyboardKey tvTerrestrialAnalog =
      LogicalKeyboardKey(0x00100001119);

  static const LogicalKeyboardKey tvTerrestrialDigital =
      LogicalKeyboardKey(0x0010000111a);

  static const LogicalKeyboardKey tvTimer = LogicalKeyboardKey(0x0010000111b);

  static const LogicalKeyboardKey key11 = LogicalKeyboardKey(0x00100001201);

  static const LogicalKeyboardKey key12 = LogicalKeyboardKey(0x00100001202);

  static const LogicalKeyboardKey suspend = LogicalKeyboardKey(0x00200000000);

  static const LogicalKeyboardKey resume = LogicalKeyboardKey(0x00200000001);

  static const LogicalKeyboardKey sleep = LogicalKeyboardKey(0x00200000002);

  static const LogicalKeyboardKey abort = LogicalKeyboardKey(0x00200000003);

  static const LogicalKeyboardKey lang1 = LogicalKeyboardKey(0x00200000010);

  static const LogicalKeyboardKey lang2 = LogicalKeyboardKey(0x00200000011);

  static const LogicalKeyboardKey lang3 = LogicalKeyboardKey(0x00200000012);

  static const LogicalKeyboardKey lang4 = LogicalKeyboardKey(0x00200000013);

  static const LogicalKeyboardKey lang5 = LogicalKeyboardKey(0x00200000014);

  static const LogicalKeyboardKey intlBackslash =
      LogicalKeyboardKey(0x00200000020);

  static const LogicalKeyboardKey intlRo = LogicalKeyboardKey(0x00200000021);

  static const LogicalKeyboardKey intlYen = LogicalKeyboardKey(0x00200000022);

  static const LogicalKeyboardKey controlLeft =
      LogicalKeyboardKey(0x00200000100);

  static const LogicalKeyboardKey controlRight =
      LogicalKeyboardKey(0x00200000101);

  static const LogicalKeyboardKey shiftLeft = LogicalKeyboardKey(0x00200000102);

  static const LogicalKeyboardKey shiftRight =
      LogicalKeyboardKey(0x00200000103);

  static const LogicalKeyboardKey altLeft = LogicalKeyboardKey(0x00200000104);

  static const LogicalKeyboardKey altRight = LogicalKeyboardKey(0x00200000105);

  static const LogicalKeyboardKey metaLeft = LogicalKeyboardKey(0x00200000106);

  static const LogicalKeyboardKey metaRight = LogicalKeyboardKey(0x00200000107);

  static const LogicalKeyboardKey control = LogicalKeyboardKey(0x002000001f0);

  static const LogicalKeyboardKey shift = LogicalKeyboardKey(0x002000001f2);

  static const LogicalKeyboardKey alt = LogicalKeyboardKey(0x002000001f4);

  static const LogicalKeyboardKey meta = LogicalKeyboardKey(0x002000001f6);

  static const LogicalKeyboardKey numpadEnter =
      LogicalKeyboardKey(0x0020000020d);

  static const LogicalKeyboardKey numpadParenLeft =
      LogicalKeyboardKey(0x00200000228);

  static const LogicalKeyboardKey numpadParenRight =
      LogicalKeyboardKey(0x00200000229);

  static const LogicalKeyboardKey numpadMultiply =
      LogicalKeyboardKey(0x0020000022a);

  static const LogicalKeyboardKey numpadAdd = LogicalKeyboardKey(0x0020000022b);

  static const LogicalKeyboardKey numpadComma =
      LogicalKeyboardKey(0x0020000022c);

  static const LogicalKeyboardKey numpadSubtract =
      LogicalKeyboardKey(0x0020000022d);

  static const LogicalKeyboardKey numpadDecimal =
      LogicalKeyboardKey(0x0020000022e);

  static const LogicalKeyboardKey numpadDivide =
      LogicalKeyboardKey(0x0020000022f);

  static const LogicalKeyboardKey numpad0 = LogicalKeyboardKey(0x00200000230);

  static const LogicalKeyboardKey numpad1 = LogicalKeyboardKey(0x00200000231);

  static const LogicalKeyboardKey numpad2 = LogicalKeyboardKey(0x00200000232);

  static const LogicalKeyboardKey numpad3 = LogicalKeyboardKey(0x00200000233);

  static const LogicalKeyboardKey numpad4 = LogicalKeyboardKey(0x00200000234);

  static const LogicalKeyboardKey numpad5 = LogicalKeyboardKey(0x00200000235);

  static const LogicalKeyboardKey numpad6 = LogicalKeyboardKey(0x00200000236);

  static const LogicalKeyboardKey numpad7 = LogicalKeyboardKey(0x00200000237);

  static const LogicalKeyboardKey numpad8 = LogicalKeyboardKey(0x00200000238);

  static const LogicalKeyboardKey numpad9 = LogicalKeyboardKey(0x00200000239);

  static const LogicalKeyboardKey numpadEqual =
      LogicalKeyboardKey(0x0020000023d);

  static const LogicalKeyboardKey gameButton1 =
      LogicalKeyboardKey(0x00200000301);

  static const LogicalKeyboardKey gameButton2 =
      LogicalKeyboardKey(0x00200000302);

  static const LogicalKeyboardKey gameButton3 =
      LogicalKeyboardKey(0x00200000303);

  static const LogicalKeyboardKey gameButton4 =
      LogicalKeyboardKey(0x00200000304);

  static const LogicalKeyboardKey gameButton5 =
      LogicalKeyboardKey(0x00200000305);

  static const LogicalKeyboardKey gameButton6 =
      LogicalKeyboardKey(0x00200000306);

  static const LogicalKeyboardKey gameButton7 =
      LogicalKeyboardKey(0x00200000307);

  static const LogicalKeyboardKey gameButton8 =
      LogicalKeyboardKey(0x00200000308);

  static const LogicalKeyboardKey gameButton9 =
      LogicalKeyboardKey(0x00200000309);

  static const LogicalKeyboardKey gameButton10 =
      LogicalKeyboardKey(0x0020000030a);

  static const LogicalKeyboardKey gameButton11 =
      LogicalKeyboardKey(0x0020000030b);

  static const LogicalKeyboardKey gameButton12 =
      LogicalKeyboardKey(0x0020000030c);

  static const LogicalKeyboardKey gameButton13 =
      LogicalKeyboardKey(0x0020000030d);

  static const LogicalKeyboardKey gameButton14 =
      LogicalKeyboardKey(0x0020000030e);

  static const LogicalKeyboardKey gameButton15 =
      LogicalKeyboardKey(0x0020000030f);

  static const LogicalKeyboardKey gameButton16 =
      LogicalKeyboardKey(0x00200000310);

  static const LogicalKeyboardKey gameButtonA =
      LogicalKeyboardKey(0x00200000311);

  static const LogicalKeyboardKey gameButtonB =
      LogicalKeyboardKey(0x00200000312);

  static const LogicalKeyboardKey gameButtonC =
      LogicalKeyboardKey(0x00200000313);

  static const LogicalKeyboardKey gameButtonLeft1 =
      LogicalKeyboardKey(0x00200000314);

  static const LogicalKeyboardKey gameButtonLeft2 =
      LogicalKeyboardKey(0x00200000315);

  static const LogicalKeyboardKey gameButtonMode =
      LogicalKeyboardKey(0x00200000316);

  static const LogicalKeyboardKey gameButtonRight1 =
      LogicalKeyboardKey(0x00200000317);

  static const LogicalKeyboardKey gameButtonRight2 =
      LogicalKeyboardKey(0x00200000318);

  static const LogicalKeyboardKey gameButtonSelect =
      LogicalKeyboardKey(0x00200000319);

  static const LogicalKeyboardKey gameButtonStart =
      LogicalKeyboardKey(0x0020000031a);

  static const LogicalKeyboardKey gameButtonThumbLeft =
      LogicalKeyboardKey(0x0020000031b);

  static const LogicalKeyboardKey gameButtonThumbRight =
      LogicalKeyboardKey(0x0020000031c);

  static const LogicalKeyboardKey gameButtonX =
      LogicalKeyboardKey(0x0020000031d);

  static const LogicalKeyboardKey gameButtonY =
      LogicalKeyboardKey(0x0020000031e);

  static const LogicalKeyboardKey gameButtonZ =
      LogicalKeyboardKey(0x0020000031f);

  static Iterable<LogicalKeyboardKey> get knownLogicalKeys =>
      _knownLogicalKeys.values;

  // A list of all predefined constant LogicalKeyboardKeys so they can be
  // searched.
  static const Map<int, LogicalKeyboardKey> _knownLogicalKeys =
      <int, LogicalKeyboardKey>{
    0x00000000020: space,
    0x00000000021: exclamation,
    0x00000000022: quote,
    0x00000000023: numberSign,
    0x00000000024: dollar,
    0x00000000025: percent,
    0x00000000026: ampersand,
    0x00000000027: quoteSingle,
    0x00000000028: parenthesisLeft,
    0x00000000029: parenthesisRight,
    0x0000000002a: asterisk,
    0x0000000002b: add,
    0x0000000002c: comma,
    0x0000000002d: minus,
    0x0000000002e: period,
    0x0000000002f: slash,
    0x00000000030: digit0,
    0x00000000031: digit1,
    0x00000000032: digit2,
    0x00000000033: digit3,
    0x00000000034: digit4,
    0x00000000035: digit5,
    0x00000000036: digit6,
    0x00000000037: digit7,
    0x00000000038: digit8,
    0x00000000039: digit9,
    0x0000000003a: colon,
    0x0000000003b: semicolon,
    0x0000000003c: less,
    0x0000000003d: equal,
    0x0000000003e: greater,
    0x0000000003f: question,
    0x00000000040: at,
    0x0000000005b: bracketLeft,
    0x0000000005c: backslash,
    0x0000000005d: bracketRight,
    0x0000000005e: caret,
    0x0000000005f: underscore,
    0x00000000060: backquote,
    0x00000000061: keyA,
    0x00000000062: keyB,
    0x00000000063: keyC,
    0x00000000064: keyD,
    0x00000000065: keyE,
    0x00000000066: keyF,
    0x00000000067: keyG,
    0x00000000068: keyH,
    0x00000000069: keyI,
    0x0000000006a: keyJ,
    0x0000000006b: keyK,
    0x0000000006c: keyL,
    0x0000000006d: keyM,
    0x0000000006e: keyN,
    0x0000000006f: keyO,
    0x00000000070: keyP,
    0x00000000071: keyQ,
    0x00000000072: keyR,
    0x00000000073: keyS,
    0x00000000074: keyT,
    0x00000000075: keyU,
    0x00000000076: keyV,
    0x00000000077: keyW,
    0x00000000078: keyX,
    0x00000000079: keyY,
    0x0000000007a: keyZ,
    0x0000000007b: braceLeft,
    0x0000000007c: bar,
    0x0000000007d: braceRight,
    0x0000000007e: tilde,
    0x00100000001: unidentified,
    0x00100000008: backspace,
    0x00100000009: tab,
    0x0010000000d: enter,
    0x0010000001b: escape,
    0x0010000007f: delete,
    0x00100000101: accel,
    0x00100000103: altGraph,
    0x00100000104: capsLock,
    0x00100000106: fn,
    0x00100000107: fnLock,
    0x00100000108: hyper,
    0x0010000010a: numLock,
    0x0010000010c: scrollLock,
    0x0010000010e: superKey,
    0x0010000010f: symbol,
    0x00100000110: symbolLock,
    0x00100000111: shiftLevel5,
    0x00100000301: arrowDown,
    0x00100000302: arrowLeft,
    0x00100000303: arrowRight,
    0x00100000304: arrowUp,
    0x00100000305: end,
    0x00100000306: home,
    0x00100000307: pageDown,
    0x00100000308: pageUp,
    0x00100000401: clear,
    0x00100000402: copy,
    0x00100000403: crSel,
    0x00100000404: cut,
    0x00100000405: eraseEof,
    0x00100000406: exSel,
    0x00100000407: insert,
    0x00100000408: paste,
    0x00100000409: redo,
    0x0010000040a: undo,
    0x00100000501: accept,
    0x00100000502: again,
    0x00100000503: attn,
    0x00100000504: cancel,
    0x00100000505: contextMenu,
    0x00100000506: execute,
    0x00100000507: find,
    0x00100000508: help,
    0x00100000509: pause,
    0x0010000050a: play,
    0x0010000050b: props,
    0x0010000050c: select,
    0x0010000050d: zoomIn,
    0x0010000050e: zoomOut,
    0x00100000601: brightnessDown,
    0x00100000602: brightnessUp,
    0x00100000603: camera,
    0x00100000604: eject,
    0x00100000605: logOff,
    0x00100000606: power,
    0x00100000607: powerOff,
    0x00100000608: printScreen,
    0x00100000609: hibernate,
    0x0010000060a: standby,
    0x0010000060b: wakeUp,
    0x00100000701: allCandidates,
    0x00100000702: alphanumeric,
    0x00100000703: codeInput,
    0x00100000704: compose,
    0x00100000705: convert,
    0x00100000706: finalMode,
    0x00100000707: groupFirst,
    0x00100000708: groupLast,
    0x00100000709: groupNext,
    0x0010000070a: groupPrevious,
    0x0010000070b: modeChange,
    0x0010000070c: nextCandidate,
    0x0010000070d: nonConvert,
    0x0010000070e: previousCandidate,
    0x0010000070f: process,
    0x00100000710: singleCandidate,
    0x00100000711: hangulMode,
    0x00100000712: hanjaMode,
    0x00100000713: junjaMode,
    0x00100000714: eisu,
    0x00100000715: hankaku,
    0x00100000716: hiragana,
    0x00100000717: hiraganaKatakana,
    0x00100000718: kanaMode,
    0x00100000719: kanjiMode,
    0x0010000071a: katakana,
    0x0010000071b: romaji,
    0x0010000071c: zenkaku,
    0x0010000071d: zenkakuHankaku,
    0x00100000801: f1,
    0x00100000802: f2,
    0x00100000803: f3,
    0x00100000804: f4,
    0x00100000805: f5,
    0x00100000806: f6,
    0x00100000807: f7,
    0x00100000808: f8,
    0x00100000809: f9,
    0x0010000080a: f10,
    0x0010000080b: f11,
    0x0010000080c: f12,
    0x0010000080d: f13,
    0x0010000080e: f14,
    0x0010000080f: f15,
    0x00100000810: f16,
    0x00100000811: f17,
    0x00100000812: f18,
    0x00100000813: f19,
    0x00100000814: f20,
    0x00100000815: f21,
    0x00100000816: f22,
    0x00100000817: f23,
    0x00100000818: f24,
    0x00100000901: soft1,
    0x00100000902: soft2,
    0x00100000903: soft3,
    0x00100000904: soft4,
    0x00100000905: soft5,
    0x00100000906: soft6,
    0x00100000907: soft7,
    0x00100000908: soft8,
    0x00100000a01: close,
    0x00100000a02: mailForward,
    0x00100000a03: mailReply,
    0x00100000a04: mailSend,
    0x00100000a05: mediaPlayPause,
    0x00100000a07: mediaStop,
    0x00100000a08: mediaTrackNext,
    0x00100000a09: mediaTrackPrevious,
    0x00100000a0a: newKey,
    0x00100000a0b: open,
    0x00100000a0c: print,
    0x00100000a0d: save,
    0x00100000a0e: spellCheck,
    0x00100000a0f: audioVolumeDown,
    0x00100000a10: audioVolumeUp,
    0x00100000a11: audioVolumeMute,
    0x00100000b01: launchApplication2,
    0x00100000b02: launchCalendar,
    0x00100000b03: launchMail,
    0x00100000b04: launchMediaPlayer,
    0x00100000b05: launchMusicPlayer,
    0x00100000b06: launchApplication1,
    0x00100000b07: launchScreenSaver,
    0x00100000b08: launchSpreadsheet,
    0x00100000b09: launchWebBrowser,
    0x00100000b0a: launchWebCam,
    0x00100000b0b: launchWordProcessor,
    0x00100000b0c: launchContacts,
    0x00100000b0d: launchPhone,
    0x00100000b0e: launchAssistant,
    0x00100000b0f: launchControlPanel,
    0x00100000c01: browserBack,
    0x00100000c02: browserFavorites,
    0x00100000c03: browserForward,
    0x00100000c04: browserHome,
    0x00100000c05: browserRefresh,
    0x00100000c06: browserSearch,
    0x00100000c07: browserStop,
    0x00100000d01: audioBalanceLeft,
    0x00100000d02: audioBalanceRight,
    0x00100000d03: audioBassBoostDown,
    0x00100000d04: audioBassBoostUp,
    0x00100000d05: audioFaderFront,
    0x00100000d06: audioFaderRear,
    0x00100000d07: audioSurroundModeNext,
    0x00100000d08: avrInput,
    0x00100000d09: avrPower,
    0x00100000d0a: channelDown,
    0x00100000d0b: channelUp,
    0x00100000d0c: colorF0Red,
    0x00100000d0d: colorF1Green,
    0x00100000d0e: colorF2Yellow,
    0x00100000d0f: colorF3Blue,
    0x00100000d10: colorF4Grey,
    0x00100000d11: colorF5Brown,
    0x00100000d12: closedCaptionToggle,
    0x00100000d13: dimmer,
    0x00100000d14: displaySwap,
    0x00100000d15: exit,
    0x00100000d16: favoriteClear0,
    0x00100000d17: favoriteClear1,
    0x00100000d18: favoriteClear2,
    0x00100000d19: favoriteClear3,
    0x00100000d1a: favoriteRecall0,
    0x00100000d1b: favoriteRecall1,
    0x00100000d1c: favoriteRecall2,
    0x00100000d1d: favoriteRecall3,
    0x00100000d1e: favoriteStore0,
    0x00100000d1f: favoriteStore1,
    0x00100000d20: favoriteStore2,
    0x00100000d21: favoriteStore3,
    0x00100000d22: guide,
    0x00100000d23: guideNextDay,
    0x00100000d24: guidePreviousDay,
    0x00100000d25: info,
    0x00100000d26: instantReplay,
    0x00100000d27: link,
    0x00100000d28: listProgram,
    0x00100000d29: liveContent,
    0x00100000d2a: lock,
    0x00100000d2b: mediaApps,
    0x00100000d2c: mediaFastForward,
    0x00100000d2d: mediaLast,
    0x00100000d2e: mediaPause,
    0x00100000d2f: mediaPlay,
    0x00100000d30: mediaRecord,
    0x00100000d31: mediaRewind,
    0x00100000d32: mediaSkip,
    0x00100000d33: nextFavoriteChannel,
    0x00100000d34: nextUserProfile,
    0x00100000d35: onDemand,
    0x00100000d36: pInPDown,
    0x00100000d37: pInPMove,
    0x00100000d38: pInPToggle,
    0x00100000d39: pInPUp,
    0x00100000d3a: playSpeedDown,
    0x00100000d3b: playSpeedReset,
    0x00100000d3c: playSpeedUp,
    0x00100000d3d: randomToggle,
    0x00100000d3e: rcLowBattery,
    0x00100000d3f: recordSpeedNext,
    0x00100000d40: rfBypass,
    0x00100000d41: scanChannelsToggle,
    0x00100000d42: screenModeNext,
    0x00100000d43: settings,
    0x00100000d44: splitScreenToggle,
    0x00100000d45: stbInput,
    0x00100000d46: stbPower,
    0x00100000d47: subtitle,
    0x00100000d48: teletext,
    0x00100000d49: tv,
    0x00100000d4a: tvInput,
    0x00100000d4b: tvPower,
    0x00100000d4c: videoModeNext,
    0x00100000d4d: wink,
    0x00100000d4e: zoomToggle,
    0x00100000d4f: dvr,
    0x00100000d50: mediaAudioTrack,
    0x00100000d51: mediaSkipBackward,
    0x00100000d52: mediaSkipForward,
    0x00100000d53: mediaStepBackward,
    0x00100000d54: mediaStepForward,
    0x00100000d55: mediaTopMenu,
    0x00100000d56: navigateIn,
    0x00100000d57: navigateNext,
    0x00100000d58: navigateOut,
    0x00100000d59: navigatePrevious,
    0x00100000d5a: pairing,
    0x00100000d5b: mediaClose,
    0x00100000e02: audioBassBoostToggle,
    0x00100000e04: audioTrebleDown,
    0x00100000e05: audioTrebleUp,
    0x00100000e06: microphoneToggle,
    0x00100000e07: microphoneVolumeDown,
    0x00100000e08: microphoneVolumeUp,
    0x00100000e09: microphoneVolumeMute,
    0x00100000f01: speechCorrectionList,
    0x00100000f02: speechInputToggle,
    0x00100001001: appSwitch,
    0x00100001002: call,
    0x00100001003: cameraFocus,
    0x00100001004: endCall,
    0x00100001005: goBack,
    0x00100001006: goHome,
    0x00100001007: headsetHook,
    0x00100001008: lastNumberRedial,
    0x00100001009: notification,
    0x0010000100a: mannerMode,
    0x0010000100b: voiceDial,
    0x00100001101: tv3DMode,
    0x00100001102: tvAntennaCable,
    0x00100001103: tvAudioDescription,
    0x00100001104: tvAudioDescriptionMixDown,
    0x00100001105: tvAudioDescriptionMixUp,
    0x00100001106: tvContentsMenu,
    0x00100001107: tvDataService,
    0x00100001108: tvInputComponent1,
    0x00100001109: tvInputComponent2,
    0x0010000110a: tvInputComposite1,
    0x0010000110b: tvInputComposite2,
    0x0010000110c: tvInputHDMI1,
    0x0010000110d: tvInputHDMI2,
    0x0010000110e: tvInputHDMI3,
    0x0010000110f: tvInputHDMI4,
    0x00100001110: tvInputVGA1,
    0x00100001111: tvMediaContext,
    0x00100001112: tvNetwork,
    0x00100001113: tvNumberEntry,
    0x00100001114: tvRadioService,
    0x00100001115: tvSatellite,
    0x00100001116: tvSatelliteBS,
    0x00100001117: tvSatelliteCS,
    0x00100001118: tvSatelliteToggle,
    0x00100001119: tvTerrestrialAnalog,
    0x0010000111a: tvTerrestrialDigital,
    0x0010000111b: tvTimer,
    0x00100001201: key11,
    0x00100001202: key12,
    0x00200000000: suspend,
    0x00200000001: resume,
    0x00200000002: sleep,
    0x00200000003: abort,
    0x00200000010: lang1,
    0x00200000011: lang2,
    0x00200000012: lang3,
    0x00200000013: lang4,
    0x00200000014: lang5,
    0x00200000020: intlBackslash,
    0x00200000021: intlRo,
    0x00200000022: intlYen,
    0x00200000100: controlLeft,
    0x00200000101: controlRight,
    0x00200000102: shiftLeft,
    0x00200000103: shiftRight,
    0x00200000104: altLeft,
    0x00200000105: altRight,
    0x00200000106: metaLeft,
    0x00200000107: metaRight,
    0x002000001f0: control,
    0x002000001f2: shift,
    0x002000001f4: alt,
    0x002000001f6: meta,
    0x0020000020d: numpadEnter,
    0x00200000228: numpadParenLeft,
    0x00200000229: numpadParenRight,
    0x0020000022a: numpadMultiply,
    0x0020000022b: numpadAdd,
    0x0020000022c: numpadComma,
    0x0020000022d: numpadSubtract,
    0x0020000022e: numpadDecimal,
    0x0020000022f: numpadDivide,
    0x00200000230: numpad0,
    0x00200000231: numpad1,
    0x00200000232: numpad2,
    0x00200000233: numpad3,
    0x00200000234: numpad4,
    0x00200000235: numpad5,
    0x00200000236: numpad6,
    0x00200000237: numpad7,
    0x00200000238: numpad8,
    0x00200000239: numpad9,
    0x0020000023d: numpadEqual,
    0x00200000301: gameButton1,
    0x00200000302: gameButton2,
    0x00200000303: gameButton3,
    0x00200000304: gameButton4,
    0x00200000305: gameButton5,
    0x00200000306: gameButton6,
    0x00200000307: gameButton7,
    0x00200000308: gameButton8,
    0x00200000309: gameButton9,
    0x0020000030a: gameButton10,
    0x0020000030b: gameButton11,
    0x0020000030c: gameButton12,
    0x0020000030d: gameButton13,
    0x0020000030e: gameButton14,
    0x0020000030f: gameButton15,
    0x00200000310: gameButton16,
    0x00200000311: gameButtonA,
    0x00200000312: gameButtonB,
    0x00200000313: gameButtonC,
    0x00200000314: gameButtonLeft1,
    0x00200000315: gameButtonLeft2,
    0x00200000316: gameButtonMode,
    0x00200000317: gameButtonRight1,
    0x00200000318: gameButtonRight2,
    0x00200000319: gameButtonSelect,
    0x0020000031a: gameButtonStart,
    0x0020000031b: gameButtonThumbLeft,
    0x0020000031c: gameButtonThumbRight,
    0x0020000031d: gameButtonX,
    0x0020000031e: gameButtonY,
    0x0020000031f: gameButtonZ,
  };

  // A map of keys to the pseudo-key synonym for that key. Used by getSynonyms.
  static final Map<LogicalKeyboardKey, LogicalKeyboardKey> _synonyms =
      <LogicalKeyboardKey, LogicalKeyboardKey>{
    shiftLeft: shift,
    shiftRight: shift,
    metaLeft: meta,
    metaRight: meta,
    altLeft: alt,
    altRight: alt,
    controlLeft: control,
    controlRight: control,
  };

  static const Map<int, String> _keyLabels = <int, String>{
    0x00000000020: 'Space',
    0x00000000021: 'Exclamation',
    0x00000000022: 'Quote',
    0x00000000023: 'Number Sign',
    0x00000000024: 'Dollar',
    0x00000000025: 'Percent',
    0x00000000026: 'Ampersand',
    0x00000000027: 'Quote Single',
    0x00000000028: 'Parenthesis Left',
    0x00000000029: 'Parenthesis Right',
    0x0000000002a: 'Asterisk',
    0x0000000002b: 'Add',
    0x0000000002c: 'Comma',
    0x0000000002d: 'Minus',
    0x0000000002e: 'Period',
    0x0000000002f: 'Slash',
    0x00000000030: 'Digit 0',
    0x00000000031: 'Digit 1',
    0x00000000032: 'Digit 2',
    0x00000000033: 'Digit 3',
    0x00000000034: 'Digit 4',
    0x00000000035: 'Digit 5',
    0x00000000036: 'Digit 6',
    0x00000000037: 'Digit 7',
    0x00000000038: 'Digit 8',
    0x00000000039: 'Digit 9',
    0x0000000003a: 'Colon',
    0x0000000003b: 'Semicolon',
    0x0000000003c: 'Less',
    0x0000000003d: 'Equal',
    0x0000000003e: 'Greater',
    0x0000000003f: 'Question',
    0x00000000040: 'At',
    0x0000000005b: 'Bracket Left',
    0x0000000005c: 'Backslash',
    0x0000000005d: 'Bracket Right',
    0x0000000005e: 'Caret',
    0x0000000005f: 'Underscore',
    0x00000000060: 'Backquote',
    0x00000000061: 'Key A',
    0x00000000062: 'Key B',
    0x00000000063: 'Key C',
    0x00000000064: 'Key D',
    0x00000000065: 'Key E',
    0x00000000066: 'Key F',
    0x00000000067: 'Key G',
    0x00000000068: 'Key H',
    0x00000000069: 'Key I',
    0x0000000006a: 'Key J',
    0x0000000006b: 'Key K',
    0x0000000006c: 'Key L',
    0x0000000006d: 'Key M',
    0x0000000006e: 'Key N',
    0x0000000006f: 'Key O',
    0x00000000070: 'Key P',
    0x00000000071: 'Key Q',
    0x00000000072: 'Key R',
    0x00000000073: 'Key S',
    0x00000000074: 'Key T',
    0x00000000075: 'Key U',
    0x00000000076: 'Key V',
    0x00000000077: 'Key W',
    0x00000000078: 'Key X',
    0x00000000079: 'Key Y',
    0x0000000007a: 'Key Z',
    0x0000000007b: 'Brace Left',
    0x0000000007c: 'Bar',
    0x0000000007d: 'Brace Right',
    0x0000000007e: 'Tilde',
    0x00100000001: 'Unidentified',
    0x00100000008: 'Backspace',
    0x00100000009: 'Tab',
    0x0010000000d: 'Enter',
    0x0010000001b: 'Escape',
    0x0010000007f: 'Delete',
    0x00100000101: 'Accel',
    0x00100000103: 'Alt Graph',
    0x00100000104: 'Caps Lock',
    0x00100000106: 'Fn',
    0x00100000107: 'Fn Lock',
    0x00100000108: 'Hyper',
    0x0010000010a: 'Num Lock',
    0x0010000010c: 'Scroll Lock',
    0x0010000010e: 'Super',
    0x0010000010f: 'Symbol',
    0x00100000110: 'Symbol Lock',
    0x00100000111: 'Shift Level 5',
    0x00100000301: 'Arrow Down',
    0x00100000302: 'Arrow Left',
    0x00100000303: 'Arrow Right',
    0x00100000304: 'Arrow Up',
    0x00100000305: 'End',
    0x00100000306: 'Home',
    0x00100000307: 'Page Down',
    0x00100000308: 'Page Up',
    0x00100000401: 'Clear',
    0x00100000402: 'Copy',
    0x00100000403: 'Cr Sel',
    0x00100000404: 'Cut',
    0x00100000405: 'Erase Eof',
    0x00100000406: 'Ex Sel',
    0x00100000407: 'Insert',
    0x00100000408: 'Paste',
    0x00100000409: 'Redo',
    0x0010000040a: 'Undo',
    0x00100000501: 'Accept',
    0x00100000502: 'Again',
    0x00100000503: 'Attn',
    0x00100000504: 'Cancel',
    0x00100000505: 'Context Menu',
    0x00100000506: 'Execute',
    0x00100000507: 'Find',
    0x00100000508: 'Help',
    0x00100000509: 'Pause',
    0x0010000050a: 'Play',
    0x0010000050b: 'Props',
    0x0010000050c: 'Select',
    0x0010000050d: 'Zoom In',
    0x0010000050e: 'Zoom Out',
    0x00100000601: 'Brightness Down',
    0x00100000602: 'Brightness Up',
    0x00100000603: 'Camera',
    0x00100000604: 'Eject',
    0x00100000605: 'Log Off',
    0x00100000606: 'Power',
    0x00100000607: 'Power Off',
    0x00100000608: 'Print Screen',
    0x00100000609: 'Hibernate',
    0x0010000060a: 'Standby',
    0x0010000060b: 'Wake Up',
    0x00100000701: 'All Candidates',
    0x00100000702: 'Alphanumeric',
    0x00100000703: 'Code Input',
    0x00100000704: 'Compose',
    0x00100000705: 'Convert',
    0x00100000706: 'Final Mode',
    0x00100000707: 'Group First',
    0x00100000708: 'Group Last',
    0x00100000709: 'Group Next',
    0x0010000070a: 'Group Previous',
    0x0010000070b: 'Mode Change',
    0x0010000070c: 'Next Candidate',
    0x0010000070d: 'Non Convert',
    0x0010000070e: 'Previous Candidate',
    0x0010000070f: 'Process',
    0x00100000710: 'Single Candidate',
    0x00100000711: 'Hangul Mode',
    0x00100000712: 'Hanja Mode',
    0x00100000713: 'Junja Mode',
    0x00100000714: 'Eisu',
    0x00100000715: 'Hankaku',
    0x00100000716: 'Hiragana',
    0x00100000717: 'Hiragana Katakana',
    0x00100000718: 'Kana Mode',
    0x00100000719: 'Kanji Mode',
    0x0010000071a: 'Katakana',
    0x0010000071b: 'Romaji',
    0x0010000071c: 'Zenkaku',
    0x0010000071d: 'Zenkaku Hankaku',
    0x00100000801: 'F1',
    0x00100000802: 'F2',
    0x00100000803: 'F3',
    0x00100000804: 'F4',
    0x00100000805: 'F5',
    0x00100000806: 'F6',
    0x00100000807: 'F7',
    0x00100000808: 'F8',
    0x00100000809: 'F9',
    0x0010000080a: 'F10',
    0x0010000080b: 'F11',
    0x0010000080c: 'F12',
    0x0010000080d: 'F13',
    0x0010000080e: 'F14',
    0x0010000080f: 'F15',
    0x00100000810: 'F16',
    0x00100000811: 'F17',
    0x00100000812: 'F18',
    0x00100000813: 'F19',
    0x00100000814: 'F20',
    0x00100000815: 'F21',
    0x00100000816: 'F22',
    0x00100000817: 'F23',
    0x00100000818: 'F24',
    0x00100000901: 'Soft 1',
    0x00100000902: 'Soft 2',
    0x00100000903: 'Soft 3',
    0x00100000904: 'Soft 4',
    0x00100000905: 'Soft 5',
    0x00100000906: 'Soft 6',
    0x00100000907: 'Soft 7',
    0x00100000908: 'Soft 8',
    0x00100000a01: 'Close',
    0x00100000a02: 'Mail Forward',
    0x00100000a03: 'Mail Reply',
    0x00100000a04: 'Mail Send',
    0x00100000a05: 'Media Play Pause',
    0x00100000a07: 'Media Stop',
    0x00100000a08: 'Media Track Next',
    0x00100000a09: 'Media Track Previous',
    0x00100000a0a: 'New',
    0x00100000a0b: 'Open',
    0x00100000a0c: 'Print',
    0x00100000a0d: 'Save',
    0x00100000a0e: 'Spell Check',
    0x00100000a0f: 'Audio Volume Down',
    0x00100000a10: 'Audio Volume Up',
    0x00100000a11: 'Audio Volume Mute',
    0x00100000b01: 'Launch Application 2',
    0x00100000b02: 'Launch Calendar',
    0x00100000b03: 'Launch Mail',
    0x00100000b04: 'Launch Media Player',
    0x00100000b05: 'Launch Music Player',
    0x00100000b06: 'Launch Application 1',
    0x00100000b07: 'Launch Screen Saver',
    0x00100000b08: 'Launch Spreadsheet',
    0x00100000b09: 'Launch Web Browser',
    0x00100000b0a: 'Launch Web Cam',
    0x00100000b0b: 'Launch Word Processor',
    0x00100000b0c: 'Launch Contacts',
    0x00100000b0d: 'Launch Phone',
    0x00100000b0e: 'Launch Assistant',
    0x00100000b0f: 'Launch Control Panel',
    0x00100000c01: 'Browser Back',
    0x00100000c02: 'Browser Favorites',
    0x00100000c03: 'Browser Forward',
    0x00100000c04: 'Browser Home',
    0x00100000c05: 'Browser Refresh',
    0x00100000c06: 'Browser Search',
    0x00100000c07: 'Browser Stop',
    0x00100000d01: 'Audio Balance Left',
    0x00100000d02: 'Audio Balance Right',
    0x00100000d03: 'Audio Bass Boost Down',
    0x00100000d04: 'Audio Bass Boost Up',
    0x00100000d05: 'Audio Fader Front',
    0x00100000d06: 'Audio Fader Rear',
    0x00100000d07: 'Audio Surround Mode Next',
    0x00100000d08: 'AVR Input',
    0x00100000d09: 'AVR Power',
    0x00100000d0a: 'Channel Down',
    0x00100000d0b: 'Channel Up',
    0x00100000d0c: 'Color F0 Red',
    0x00100000d0d: 'Color F1 Green',
    0x00100000d0e: 'Color F2 Yellow',
    0x00100000d0f: 'Color F3 Blue',
    0x00100000d10: 'Color F4 Grey',
    0x00100000d11: 'Color F5 Brown',
    0x00100000d12: 'Closed Caption Toggle',
    0x00100000d13: 'Dimmer',
    0x00100000d14: 'Display Swap',
    0x00100000d15: 'Exit',
    0x00100000d16: 'Favorite Clear 0',
    0x00100000d17: 'Favorite Clear 1',
    0x00100000d18: 'Favorite Clear 2',
    0x00100000d19: 'Favorite Clear 3',
    0x00100000d1a: 'Favorite Recall 0',
    0x00100000d1b: 'Favorite Recall 1',
    0x00100000d1c: 'Favorite Recall 2',
    0x00100000d1d: 'Favorite Recall 3',
    0x00100000d1e: 'Favorite Store 0',
    0x00100000d1f: 'Favorite Store 1',
    0x00100000d20: 'Favorite Store 2',
    0x00100000d21: 'Favorite Store 3',
    0x00100000d22: 'Guide',
    0x00100000d23: 'Guide Next Day',
    0x00100000d24: 'Guide Previous Day',
    0x00100000d25: 'Info',
    0x00100000d26: 'Instant Replay',
    0x00100000d27: 'Link',
    0x00100000d28: 'List Program',
    0x00100000d29: 'Live Content',
    0x00100000d2a: 'Lock',
    0x00100000d2b: 'Media Apps',
    0x00100000d2c: 'Media Fast Forward',
    0x00100000d2d: 'Media Last',
    0x00100000d2e: 'Media Pause',
    0x00100000d2f: 'Media Play',
    0x00100000d30: 'Media Record',
    0x00100000d31: 'Media Rewind',
    0x00100000d32: 'Media Skip',
    0x00100000d33: 'Next Favorite Channel',
    0x00100000d34: 'Next User Profile',
    0x00100000d35: 'On Demand',
    0x00100000d36: 'P In P Down',
    0x00100000d37: 'P In P Move',
    0x00100000d38: 'P In P Toggle',
    0x00100000d39: 'P In P Up',
    0x00100000d3a: 'Play Speed Down',
    0x00100000d3b: 'Play Speed Reset',
    0x00100000d3c: 'Play Speed Up',
    0x00100000d3d: 'Random Toggle',
    0x00100000d3e: 'Rc Low Battery',
    0x00100000d3f: 'Record Speed Next',
    0x00100000d40: 'Rf Bypass',
    0x00100000d41: 'Scan Channels Toggle',
    0x00100000d42: 'Screen Mode Next',
    0x00100000d43: 'Settings',
    0x00100000d44: 'Split Screen Toggle',
    0x00100000d45: 'STB Input',
    0x00100000d46: 'STB Power',
    0x00100000d47: 'Subtitle',
    0x00100000d48: 'Teletext',
    0x00100000d49: 'TV',
    0x00100000d4a: 'TV Input',
    0x00100000d4b: 'TV Power',
    0x00100000d4c: 'Video Mode Next',
    0x00100000d4d: 'Wink',
    0x00100000d4e: 'Zoom Toggle',
    0x00100000d4f: 'DVR',
    0x00100000d50: 'Media Audio Track',
    0x00100000d51: 'Media Skip Backward',
    0x00100000d52: 'Media Skip Forward',
    0x00100000d53: 'Media Step Backward',
    0x00100000d54: 'Media Step Forward',
    0x00100000d55: 'Media Top Menu',
    0x00100000d56: 'Navigate In',
    0x00100000d57: 'Navigate Next',
    0x00100000d58: 'Navigate Out',
    0x00100000d59: 'Navigate Previous',
    0x00100000d5a: 'Pairing',
    0x00100000d5b: 'Media Close',
    0x00100000e02: 'Audio Bass Boost Toggle',
    0x00100000e04: 'Audio Treble Down',
    0x00100000e05: 'Audio Treble Up',
    0x00100000e06: 'Microphone Toggle',
    0x00100000e07: 'Microphone Volume Down',
    0x00100000e08: 'Microphone Volume Up',
    0x00100000e09: 'Microphone Volume Mute',
    0x00100000f01: 'Speech Correction List',
    0x00100000f02: 'Speech Input Toggle',
    0x00100001001: 'App Switch',
    0x00100001002: 'Call',
    0x00100001003: 'Camera Focus',
    0x00100001004: 'End Call',
    0x00100001005: 'Go Back',
    0x00100001006: 'Go Home',
    0x00100001007: 'Headset Hook',
    0x00100001008: 'Last Number Redial',
    0x00100001009: 'Notification',
    0x0010000100a: 'Manner Mode',
    0x0010000100b: 'Voice Dial',
    0x00100001101: 'TV 3 D Mode',
    0x00100001102: 'TV Antenna Cable',
    0x00100001103: 'TV Audio Description',
    0x00100001104: 'TV Audio Description Mix Down',
    0x00100001105: 'TV Audio Description Mix Up',
    0x00100001106: 'TV Contents Menu',
    0x00100001107: 'TV Data Service',
    0x00100001108: 'TV Input Component 1',
    0x00100001109: 'TV Input Component 2',
    0x0010000110a: 'TV Input Composite 1',
    0x0010000110b: 'TV Input Composite 2',
    0x0010000110c: 'TV Input HDMI 1',
    0x0010000110d: 'TV Input HDMI 2',
    0x0010000110e: 'TV Input HDMI 3',
    0x0010000110f: 'TV Input HDMI 4',
    0x00100001110: 'TV Input VGA 1',
    0x00100001111: 'TV Media Context',
    0x00100001112: 'TV Network',
    0x00100001113: 'TV Number Entry',
    0x00100001114: 'TV Radio Service',
    0x00100001115: 'TV Satellite',
    0x00100001116: 'TV Satellite BS',
    0x00100001117: 'TV Satellite CS',
    0x00100001118: 'TV Satellite Toggle',
    0x00100001119: 'TV Terrestrial Analog',
    0x0010000111a: 'TV Terrestrial Digital',
    0x0010000111b: 'TV Timer',
    0x00100001201: 'Key 11',
    0x00100001202: 'Key 12',
    0x00200000000: 'Suspend',
    0x00200000001: 'Resume',
    0x00200000002: 'Sleep',
    0x00200000003: 'Abort',
    0x00200000010: 'Lang 1',
    0x00200000011: 'Lang 2',
    0x00200000012: 'Lang 3',
    0x00200000013: 'Lang 4',
    0x00200000014: 'Lang 5',
    0x00200000020: 'Intl Backslash',
    0x00200000021: 'Intl Ro',
    0x00200000022: 'Intl Yen',
    0x00200000100: 'Control Left',
    0x00200000101: 'Control Right',
    0x00200000102: 'Shift Left',
    0x00200000103: 'Shift Right',
    0x00200000104: 'Alt Left',
    0x00200000105: 'Alt Right',
    0x00200000106: 'Meta Left',
    0x00200000107: 'Meta Right',
    0x002000001f0: 'Control',
    0x002000001f2: 'Shift',
    0x002000001f4: 'Alt',
    0x002000001f6: 'Meta',
    0x0020000020d: 'Numpad Enter',
    0x00200000228: 'Numpad Paren Left',
    0x00200000229: 'Numpad Paren Right',
    0x0020000022a: 'Numpad Multiply',
    0x0020000022b: 'Numpad Add',
    0x0020000022c: 'Numpad Comma',
    0x0020000022d: 'Numpad Subtract',
    0x0020000022e: 'Numpad Decimal',
    0x0020000022f: 'Numpad Divide',
    0x00200000230: 'Numpad 0',
    0x00200000231: 'Numpad 1',
    0x00200000232: 'Numpad 2',
    0x00200000233: 'Numpad 3',
    0x00200000234: 'Numpad 4',
    0x00200000235: 'Numpad 5',
    0x00200000236: 'Numpad 6',
    0x00200000237: 'Numpad 7',
    0x00200000238: 'Numpad 8',
    0x00200000239: 'Numpad 9',
    0x0020000023d: 'Numpad Equal',
    0x00200000301: 'Game Button 1',
    0x00200000302: 'Game Button 2',
    0x00200000303: 'Game Button 3',
    0x00200000304: 'Game Button 4',
    0x00200000305: 'Game Button 5',
    0x00200000306: 'Game Button 6',
    0x00200000307: 'Game Button 7',
    0x00200000308: 'Game Button 8',
    0x00200000309: 'Game Button 9',
    0x0020000030a: 'Game Button 10',
    0x0020000030b: 'Game Button 11',
    0x0020000030c: 'Game Button 12',
    0x0020000030d: 'Game Button 13',
    0x0020000030e: 'Game Button 14',
    0x0020000030f: 'Game Button 15',
    0x00200000310: 'Game Button 16',
    0x00200000311: 'Game Button A',
    0x00200000312: 'Game Button B',
    0x00200000313: 'Game Button C',
    0x00200000314: 'Game Button Left 1',
    0x00200000315: 'Game Button Left 2',
    0x00200000316: 'Game Button Mode',
    0x00200000317: 'Game Button Right 1',
    0x00200000318: 'Game Button Right 2',
    0x00200000319: 'Game Button Select',
    0x0020000031a: 'Game Button Start',
    0x0020000031b: 'Game Button Thumb Left',
    0x0020000031c: 'Game Button Thumb Right',
    0x0020000031d: 'Game Button X',
    0x0020000031e: 'Game Button Y',
    0x0020000031f: 'Game Button Z',
  };
}

@immutable
class PhysicalKeyboardKey extends KeyboardKey {
  const PhysicalKeyboardKey(this.usbHidUsage);

  final int usbHidUsage;

  String? get debugName {
    String? result;
    assert(() {
      result = _debugNames[usbHidUsage] ??
          'Key with ID 0x${usbHidUsage.toRadixString(16).padLeft(8, '0')}';
      return true;
    }());
    return result;
  }

  @override
  int get hashCode => usbHidUsage.hashCode;

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other.runtimeType != runtimeType) {
      return false;
    }
    return other is PhysicalKeyboardKey && other.usbHidUsage == usbHidUsage;
  }

  static PhysicalKeyboardKey? findKeyByCode(int usageCode) =>
      _knownPhysicalKeys[usageCode];

  @override
  void debugFillProperties(DiagnosticPropertiesBuilder properties) {
    super.debugFillProperties(properties);
    properties.add(StringProperty(
        'usbHidUsage', '0x${usbHidUsage.toRadixString(16).padLeft(8, '0')}'));
    properties.add(StringProperty('debugName', debugName, defaultValue: null));
  }

  // Key constants for all keyboard keys in the USB HID specification at the
  // time Flutter was built.

  static const PhysicalKeyboardKey hyper = PhysicalKeyboardKey(0x00000010);

  static const PhysicalKeyboardKey superKey = PhysicalKeyboardKey(0x00000011);

  static const PhysicalKeyboardKey fn = PhysicalKeyboardKey(0x00000012);

  static const PhysicalKeyboardKey fnLock = PhysicalKeyboardKey(0x00000013);

  static const PhysicalKeyboardKey suspend = PhysicalKeyboardKey(0x00000014);

  static const PhysicalKeyboardKey resume = PhysicalKeyboardKey(0x00000015);

  static const PhysicalKeyboardKey turbo = PhysicalKeyboardKey(0x00000016);

  static const PhysicalKeyboardKey privacyScreenToggle =
      PhysicalKeyboardKey(0x00000017);

  static const PhysicalKeyboardKey microphoneMuteToggle =
      PhysicalKeyboardKey(0x00000018);

  static const PhysicalKeyboardKey sleep = PhysicalKeyboardKey(0x00010082);

  static const PhysicalKeyboardKey wakeUp = PhysicalKeyboardKey(0x00010083);

  static const PhysicalKeyboardKey displayToggleIntExt =
      PhysicalKeyboardKey(0x000100b5);

  static const PhysicalKeyboardKey gameButton1 =
      PhysicalKeyboardKey(0x0005ff01);

  static const PhysicalKeyboardKey gameButton2 =
      PhysicalKeyboardKey(0x0005ff02);

  static const PhysicalKeyboardKey gameButton3 =
      PhysicalKeyboardKey(0x0005ff03);

  static const PhysicalKeyboardKey gameButton4 =
      PhysicalKeyboardKey(0x0005ff04);

  static const PhysicalKeyboardKey gameButton5 =
      PhysicalKeyboardKey(0x0005ff05);

  static const PhysicalKeyboardKey gameButton6 =
      PhysicalKeyboardKey(0x0005ff06);

  static const PhysicalKeyboardKey gameButton7 =
      PhysicalKeyboardKey(0x0005ff07);

  static const PhysicalKeyboardKey gameButton8 =
      PhysicalKeyboardKey(0x0005ff08);

  static const PhysicalKeyboardKey gameButton9 =
      PhysicalKeyboardKey(0x0005ff09);

  static const PhysicalKeyboardKey gameButton10 =
      PhysicalKeyboardKey(0x0005ff0a);

  static const PhysicalKeyboardKey gameButton11 =
      PhysicalKeyboardKey(0x0005ff0b);

  static const PhysicalKeyboardKey gameButton12 =
      PhysicalKeyboardKey(0x0005ff0c);

  static const PhysicalKeyboardKey gameButton13 =
      PhysicalKeyboardKey(0x0005ff0d);

  static const PhysicalKeyboardKey gameButton14 =
      PhysicalKeyboardKey(0x0005ff0e);

  static const PhysicalKeyboardKey gameButton15 =
      PhysicalKeyboardKey(0x0005ff0f);

  static const PhysicalKeyboardKey gameButton16 =
      PhysicalKeyboardKey(0x0005ff10);

  static const PhysicalKeyboardKey gameButtonA =
      PhysicalKeyboardKey(0x0005ff11);

  static const PhysicalKeyboardKey gameButtonB =
      PhysicalKeyboardKey(0x0005ff12);

  static const PhysicalKeyboardKey gameButtonC =
      PhysicalKeyboardKey(0x0005ff13);

  static const PhysicalKeyboardKey gameButtonLeft1 =
      PhysicalKeyboardKey(0x0005ff14);

  static const PhysicalKeyboardKey gameButtonLeft2 =
      PhysicalKeyboardKey(0x0005ff15);

  static const PhysicalKeyboardKey gameButtonMode =
      PhysicalKeyboardKey(0x0005ff16);

  static const PhysicalKeyboardKey gameButtonRight1 =
      PhysicalKeyboardKey(0x0005ff17);

  static const PhysicalKeyboardKey gameButtonRight2 =
      PhysicalKeyboardKey(0x0005ff18);

  static const PhysicalKeyboardKey gameButtonSelect =
      PhysicalKeyboardKey(0x0005ff19);

  static const PhysicalKeyboardKey gameButtonStart =
      PhysicalKeyboardKey(0x0005ff1a);

  static const PhysicalKeyboardKey gameButtonThumbLeft =
      PhysicalKeyboardKey(0x0005ff1b);

  static const PhysicalKeyboardKey gameButtonThumbRight =
      PhysicalKeyboardKey(0x0005ff1c);

  static const PhysicalKeyboardKey gameButtonX =
      PhysicalKeyboardKey(0x0005ff1d);

  static const PhysicalKeyboardKey gameButtonY =
      PhysicalKeyboardKey(0x0005ff1e);

  static const PhysicalKeyboardKey gameButtonZ =
      PhysicalKeyboardKey(0x0005ff1f);

  static const PhysicalKeyboardKey usbReserved =
      PhysicalKeyboardKey(0x00070000);

  static const PhysicalKeyboardKey usbErrorRollOver =
      PhysicalKeyboardKey(0x00070001);

  static const PhysicalKeyboardKey usbPostFail =
      PhysicalKeyboardKey(0x00070002);

  static const PhysicalKeyboardKey usbErrorUndefined =
      PhysicalKeyboardKey(0x00070003);

  static const PhysicalKeyboardKey keyA = PhysicalKeyboardKey(0x00070004);

  static const PhysicalKeyboardKey keyB = PhysicalKeyboardKey(0x00070005);

  static const PhysicalKeyboardKey keyC = PhysicalKeyboardKey(0x00070006);

  static const PhysicalKeyboardKey keyD = PhysicalKeyboardKey(0x00070007);

  static const PhysicalKeyboardKey keyE = PhysicalKeyboardKey(0x00070008);

  static const PhysicalKeyboardKey keyF = PhysicalKeyboardKey(0x00070009);

  static const PhysicalKeyboardKey keyG = PhysicalKeyboardKey(0x0007000a);

  static const PhysicalKeyboardKey keyH = PhysicalKeyboardKey(0x0007000b);

  static const PhysicalKeyboardKey keyI = PhysicalKeyboardKey(0x0007000c);

  static const PhysicalKeyboardKey keyJ = PhysicalKeyboardKey(0x0007000d);

  static const PhysicalKeyboardKey keyK = PhysicalKeyboardKey(0x0007000e);

  static const PhysicalKeyboardKey keyL = PhysicalKeyboardKey(0x0007000f);

  static const PhysicalKeyboardKey keyM = PhysicalKeyboardKey(0x00070010);

  static const PhysicalKeyboardKey keyN = PhysicalKeyboardKey(0x00070011);

  static const PhysicalKeyboardKey keyO = PhysicalKeyboardKey(0x00070012);

  static const PhysicalKeyboardKey keyP = PhysicalKeyboardKey(0x00070013);

  static const PhysicalKeyboardKey keyQ = PhysicalKeyboardKey(0x00070014);

  static const PhysicalKeyboardKey keyR = PhysicalKeyboardKey(0x00070015);

  static const PhysicalKeyboardKey keyS = PhysicalKeyboardKey(0x00070016);

  static const PhysicalKeyboardKey keyT = PhysicalKeyboardKey(0x00070017);

  static const PhysicalKeyboardKey keyU = PhysicalKeyboardKey(0x00070018);

  static const PhysicalKeyboardKey keyV = PhysicalKeyboardKey(0x00070019);

  static const PhysicalKeyboardKey keyW = PhysicalKeyboardKey(0x0007001a);

  static const PhysicalKeyboardKey keyX = PhysicalKeyboardKey(0x0007001b);

  static const PhysicalKeyboardKey keyY = PhysicalKeyboardKey(0x0007001c);

  static const PhysicalKeyboardKey keyZ = PhysicalKeyboardKey(0x0007001d);

  static const PhysicalKeyboardKey digit1 = PhysicalKeyboardKey(0x0007001e);

  static const PhysicalKeyboardKey digit2 = PhysicalKeyboardKey(0x0007001f);

  static const PhysicalKeyboardKey digit3 = PhysicalKeyboardKey(0x00070020);

  static const PhysicalKeyboardKey digit4 = PhysicalKeyboardKey(0x00070021);

  static const PhysicalKeyboardKey digit5 = PhysicalKeyboardKey(0x00070022);

  static const PhysicalKeyboardKey digit6 = PhysicalKeyboardKey(0x00070023);

  static const PhysicalKeyboardKey digit7 = PhysicalKeyboardKey(0x00070024);

  static const PhysicalKeyboardKey digit8 = PhysicalKeyboardKey(0x00070025);

  static const PhysicalKeyboardKey digit9 = PhysicalKeyboardKey(0x00070026);

  static const PhysicalKeyboardKey digit0 = PhysicalKeyboardKey(0x00070027);

  static const PhysicalKeyboardKey enter = PhysicalKeyboardKey(0x00070028);

  static const PhysicalKeyboardKey escape = PhysicalKeyboardKey(0x00070029);

  static const PhysicalKeyboardKey backspace = PhysicalKeyboardKey(0x0007002a);

  static const PhysicalKeyboardKey tab = PhysicalKeyboardKey(0x0007002b);

  static const PhysicalKeyboardKey space = PhysicalKeyboardKey(0x0007002c);

  static const PhysicalKeyboardKey minus = PhysicalKeyboardKey(0x0007002d);

  static const PhysicalKeyboardKey equal = PhysicalKeyboardKey(0x0007002e);

  static const PhysicalKeyboardKey bracketLeft =
      PhysicalKeyboardKey(0x0007002f);

  static const PhysicalKeyboardKey bracketRight =
      PhysicalKeyboardKey(0x00070030);

  static const PhysicalKeyboardKey backslash = PhysicalKeyboardKey(0x00070031);

  static const PhysicalKeyboardKey semicolon = PhysicalKeyboardKey(0x00070033);

  static const PhysicalKeyboardKey quote = PhysicalKeyboardKey(0x00070034);

  static const PhysicalKeyboardKey backquote = PhysicalKeyboardKey(0x00070035);

  static const PhysicalKeyboardKey comma = PhysicalKeyboardKey(0x00070036);

  static const PhysicalKeyboardKey period = PhysicalKeyboardKey(0x00070037);

  static const PhysicalKeyboardKey slash = PhysicalKeyboardKey(0x00070038);

  static const PhysicalKeyboardKey capsLock = PhysicalKeyboardKey(0x00070039);

  static const PhysicalKeyboardKey f1 = PhysicalKeyboardKey(0x0007003a);

  static const PhysicalKeyboardKey f2 = PhysicalKeyboardKey(0x0007003b);

  static const PhysicalKeyboardKey f3 = PhysicalKeyboardKey(0x0007003c);

  static const PhysicalKeyboardKey f4 = PhysicalKeyboardKey(0x0007003d);

  static const PhysicalKeyboardKey f5 = PhysicalKeyboardKey(0x0007003e);

  static const PhysicalKeyboardKey f6 = PhysicalKeyboardKey(0x0007003f);

  static const PhysicalKeyboardKey f7 = PhysicalKeyboardKey(0x00070040);

  static const PhysicalKeyboardKey f8 = PhysicalKeyboardKey(0x00070041);

  static const PhysicalKeyboardKey f9 = PhysicalKeyboardKey(0x00070042);

  static const PhysicalKeyboardKey f10 = PhysicalKeyboardKey(0x00070043);

  static const PhysicalKeyboardKey f11 = PhysicalKeyboardKey(0x00070044);

  static const PhysicalKeyboardKey f12 = PhysicalKeyboardKey(0x00070045);

  static const PhysicalKeyboardKey printScreen =
      PhysicalKeyboardKey(0x00070046);

  static const PhysicalKeyboardKey scrollLock = PhysicalKeyboardKey(0x00070047);

  static const PhysicalKeyboardKey pause = PhysicalKeyboardKey(0x00070048);

  static const PhysicalKeyboardKey insert = PhysicalKeyboardKey(0x00070049);

  static const PhysicalKeyboardKey home = PhysicalKeyboardKey(0x0007004a);

  static const PhysicalKeyboardKey pageUp = PhysicalKeyboardKey(0x0007004b);

  static const PhysicalKeyboardKey delete = PhysicalKeyboardKey(0x0007004c);

  static const PhysicalKeyboardKey end = PhysicalKeyboardKey(0x0007004d);

  static const PhysicalKeyboardKey pageDown = PhysicalKeyboardKey(0x0007004e);

  static const PhysicalKeyboardKey arrowRight = PhysicalKeyboardKey(0x0007004f);

  static const PhysicalKeyboardKey arrowLeft = PhysicalKeyboardKey(0x00070050);

  static const PhysicalKeyboardKey arrowDown = PhysicalKeyboardKey(0x00070051);

  static const PhysicalKeyboardKey arrowUp = PhysicalKeyboardKey(0x00070052);

  static const PhysicalKeyboardKey numLock = PhysicalKeyboardKey(0x00070053);

  static const PhysicalKeyboardKey numpadDivide =
      PhysicalKeyboardKey(0x00070054);

  static const PhysicalKeyboardKey numpadMultiply =
      PhysicalKeyboardKey(0x00070055);

  static const PhysicalKeyboardKey numpadSubtract =
      PhysicalKeyboardKey(0x00070056);

  static const PhysicalKeyboardKey numpadAdd = PhysicalKeyboardKey(0x00070057);

  static const PhysicalKeyboardKey numpadEnter =
      PhysicalKeyboardKey(0x00070058);

  static const PhysicalKeyboardKey numpad1 = PhysicalKeyboardKey(0x00070059);

  static const PhysicalKeyboardKey numpad2 = PhysicalKeyboardKey(0x0007005a);

  static const PhysicalKeyboardKey numpad3 = PhysicalKeyboardKey(0x0007005b);

  static const PhysicalKeyboardKey numpad4 = PhysicalKeyboardKey(0x0007005c);

  static const PhysicalKeyboardKey numpad5 = PhysicalKeyboardKey(0x0007005d);

  static const PhysicalKeyboardKey numpad6 = PhysicalKeyboardKey(0x0007005e);

  static const PhysicalKeyboardKey numpad7 = PhysicalKeyboardKey(0x0007005f);

  static const PhysicalKeyboardKey numpad8 = PhysicalKeyboardKey(0x00070060);

  static const PhysicalKeyboardKey numpad9 = PhysicalKeyboardKey(0x00070061);

  static const PhysicalKeyboardKey numpad0 = PhysicalKeyboardKey(0x00070062);

  static const PhysicalKeyboardKey numpadDecimal =
      PhysicalKeyboardKey(0x00070063);

  static const PhysicalKeyboardKey intlBackslash =
      PhysicalKeyboardKey(0x00070064);

  static const PhysicalKeyboardKey contextMenu =
      PhysicalKeyboardKey(0x00070065);

  static const PhysicalKeyboardKey power = PhysicalKeyboardKey(0x00070066);

  static const PhysicalKeyboardKey numpadEqual =
      PhysicalKeyboardKey(0x00070067);

  static const PhysicalKeyboardKey f13 = PhysicalKeyboardKey(0x00070068);

  static const PhysicalKeyboardKey f14 = PhysicalKeyboardKey(0x00070069);

  static const PhysicalKeyboardKey f15 = PhysicalKeyboardKey(0x0007006a);

  static const PhysicalKeyboardKey f16 = PhysicalKeyboardKey(0x0007006b);

  static const PhysicalKeyboardKey f17 = PhysicalKeyboardKey(0x0007006c);

  static const PhysicalKeyboardKey f18 = PhysicalKeyboardKey(0x0007006d);

  static const PhysicalKeyboardKey f19 = PhysicalKeyboardKey(0x0007006e);

  static const PhysicalKeyboardKey f20 = PhysicalKeyboardKey(0x0007006f);

  static const PhysicalKeyboardKey f21 = PhysicalKeyboardKey(0x00070070);

  static const PhysicalKeyboardKey f22 = PhysicalKeyboardKey(0x00070071);

  static const PhysicalKeyboardKey f23 = PhysicalKeyboardKey(0x00070072);

  static const PhysicalKeyboardKey f24 = PhysicalKeyboardKey(0x00070073);

  static const PhysicalKeyboardKey open = PhysicalKeyboardKey(0x00070074);

  static const PhysicalKeyboardKey help = PhysicalKeyboardKey(0x00070075);

  static const PhysicalKeyboardKey select = PhysicalKeyboardKey(0x00070077);

  static const PhysicalKeyboardKey again = PhysicalKeyboardKey(0x00070079);

  static const PhysicalKeyboardKey undo = PhysicalKeyboardKey(0x0007007a);

  static const PhysicalKeyboardKey cut = PhysicalKeyboardKey(0x0007007b);

  static const PhysicalKeyboardKey copy = PhysicalKeyboardKey(0x0007007c);

  static const PhysicalKeyboardKey paste = PhysicalKeyboardKey(0x0007007d);

  static const PhysicalKeyboardKey find = PhysicalKeyboardKey(0x0007007e);

  static const PhysicalKeyboardKey audioVolumeMute =
      PhysicalKeyboardKey(0x0007007f);

  static const PhysicalKeyboardKey audioVolumeUp =
      PhysicalKeyboardKey(0x00070080);

  static const PhysicalKeyboardKey audioVolumeDown =
      PhysicalKeyboardKey(0x00070081);

  static const PhysicalKeyboardKey numpadComma =
      PhysicalKeyboardKey(0x00070085);

  static const PhysicalKeyboardKey intlRo = PhysicalKeyboardKey(0x00070087);

  static const PhysicalKeyboardKey kanaMode = PhysicalKeyboardKey(0x00070088);

  static const PhysicalKeyboardKey intlYen = PhysicalKeyboardKey(0x00070089);

  static const PhysicalKeyboardKey convert = PhysicalKeyboardKey(0x0007008a);

  static const PhysicalKeyboardKey nonConvert = PhysicalKeyboardKey(0x0007008b);

  static const PhysicalKeyboardKey lang1 = PhysicalKeyboardKey(0x00070090);

  static const PhysicalKeyboardKey lang2 = PhysicalKeyboardKey(0x00070091);

  static const PhysicalKeyboardKey lang3 = PhysicalKeyboardKey(0x00070092);

  static const PhysicalKeyboardKey lang4 = PhysicalKeyboardKey(0x00070093);

  static const PhysicalKeyboardKey lang5 = PhysicalKeyboardKey(0x00070094);

  static const PhysicalKeyboardKey abort = PhysicalKeyboardKey(0x0007009b);

  static const PhysicalKeyboardKey props = PhysicalKeyboardKey(0x000700a3);

  static const PhysicalKeyboardKey numpadParenLeft =
      PhysicalKeyboardKey(0x000700b6);

  static const PhysicalKeyboardKey numpadParenRight =
      PhysicalKeyboardKey(0x000700b7);

  static const PhysicalKeyboardKey numpadBackspace =
      PhysicalKeyboardKey(0x000700bb);

  static const PhysicalKeyboardKey numpadMemoryStore =
      PhysicalKeyboardKey(0x000700d0);

  static const PhysicalKeyboardKey numpadMemoryRecall =
      PhysicalKeyboardKey(0x000700d1);

  static const PhysicalKeyboardKey numpadMemoryClear =
      PhysicalKeyboardKey(0x000700d2);

  static const PhysicalKeyboardKey numpadMemoryAdd =
      PhysicalKeyboardKey(0x000700d3);

  static const PhysicalKeyboardKey numpadMemorySubtract =
      PhysicalKeyboardKey(0x000700d4);

  static const PhysicalKeyboardKey numpadSignChange =
      PhysicalKeyboardKey(0x000700d7);

  static const PhysicalKeyboardKey numpadClear =
      PhysicalKeyboardKey(0x000700d8);

  static const PhysicalKeyboardKey numpadClearEntry =
      PhysicalKeyboardKey(0x000700d9);

  static const PhysicalKeyboardKey controlLeft =
      PhysicalKeyboardKey(0x000700e0);

  static const PhysicalKeyboardKey shiftLeft = PhysicalKeyboardKey(0x000700e1);

  static const PhysicalKeyboardKey altLeft = PhysicalKeyboardKey(0x000700e2);

  static const PhysicalKeyboardKey metaLeft = PhysicalKeyboardKey(0x000700e3);

  static const PhysicalKeyboardKey controlRight =
      PhysicalKeyboardKey(0x000700e4);

  static const PhysicalKeyboardKey shiftRight = PhysicalKeyboardKey(0x000700e5);

  static const PhysicalKeyboardKey altRight = PhysicalKeyboardKey(0x000700e6);

  static const PhysicalKeyboardKey metaRight = PhysicalKeyboardKey(0x000700e7);

  static const PhysicalKeyboardKey info = PhysicalKeyboardKey(0x000c0060);

  static const PhysicalKeyboardKey closedCaptionToggle =
      PhysicalKeyboardKey(0x000c0061);

  static const PhysicalKeyboardKey brightnessUp =
      PhysicalKeyboardKey(0x000c006f);

  static const PhysicalKeyboardKey brightnessDown =
      PhysicalKeyboardKey(0x000c0070);

  static const PhysicalKeyboardKey brightnessToggle =
      PhysicalKeyboardKey(0x000c0072);

  static const PhysicalKeyboardKey brightnessMinimum =
      PhysicalKeyboardKey(0x000c0073);

  static const PhysicalKeyboardKey brightnessMaximum =
      PhysicalKeyboardKey(0x000c0074);

  static const PhysicalKeyboardKey brightnessAuto =
      PhysicalKeyboardKey(0x000c0075);

  static const PhysicalKeyboardKey kbdIllumUp = PhysicalKeyboardKey(0x000c0079);

  static const PhysicalKeyboardKey kbdIllumDown =
      PhysicalKeyboardKey(0x000c007a);

  static const PhysicalKeyboardKey mediaLast = PhysicalKeyboardKey(0x000c0083);

  static const PhysicalKeyboardKey launchPhone =
      PhysicalKeyboardKey(0x000c008c);

  static const PhysicalKeyboardKey programGuide =
      PhysicalKeyboardKey(0x000c008d);

  static const PhysicalKeyboardKey exit = PhysicalKeyboardKey(0x000c0094);

  static const PhysicalKeyboardKey channelUp = PhysicalKeyboardKey(0x000c009c);

  static const PhysicalKeyboardKey channelDown =
      PhysicalKeyboardKey(0x000c009d);

  static const PhysicalKeyboardKey mediaPlay = PhysicalKeyboardKey(0x000c00b0);

  static const PhysicalKeyboardKey mediaPause = PhysicalKeyboardKey(0x000c00b1);

  static const PhysicalKeyboardKey mediaRecord =
      PhysicalKeyboardKey(0x000c00b2);

  static const PhysicalKeyboardKey mediaFastForward =
      PhysicalKeyboardKey(0x000c00b3);

  static const PhysicalKeyboardKey mediaRewind =
      PhysicalKeyboardKey(0x000c00b4);

  static const PhysicalKeyboardKey mediaTrackNext =
      PhysicalKeyboardKey(0x000c00b5);

  static const PhysicalKeyboardKey mediaTrackPrevious =
      PhysicalKeyboardKey(0x000c00b6);

  static const PhysicalKeyboardKey mediaStop = PhysicalKeyboardKey(0x000c00b7);

  static const PhysicalKeyboardKey eject = PhysicalKeyboardKey(0x000c00b8);

  static const PhysicalKeyboardKey mediaPlayPause =
      PhysicalKeyboardKey(0x000c00cd);

  static const PhysicalKeyboardKey speechInputToggle =
      PhysicalKeyboardKey(0x000c00cf);

  static const PhysicalKeyboardKey bassBoost = PhysicalKeyboardKey(0x000c00e5);

  static const PhysicalKeyboardKey mediaSelect =
      PhysicalKeyboardKey(0x000c0183);

  static const PhysicalKeyboardKey launchWordProcessor =
      PhysicalKeyboardKey(0x000c0184);

  static const PhysicalKeyboardKey launchSpreadsheet =
      PhysicalKeyboardKey(0x000c0186);

  static const PhysicalKeyboardKey launchMail = PhysicalKeyboardKey(0x000c018a);

  static const PhysicalKeyboardKey launchContacts =
      PhysicalKeyboardKey(0x000c018d);

  static const PhysicalKeyboardKey launchCalendar =
      PhysicalKeyboardKey(0x000c018e);

  static const PhysicalKeyboardKey launchApp2 = PhysicalKeyboardKey(0x000c0192);

  static const PhysicalKeyboardKey launchApp1 = PhysicalKeyboardKey(0x000c0194);

  static const PhysicalKeyboardKey launchInternetBrowser =
      PhysicalKeyboardKey(0x000c0196);

  static const PhysicalKeyboardKey logOff = PhysicalKeyboardKey(0x000c019c);

  static const PhysicalKeyboardKey lockScreen = PhysicalKeyboardKey(0x000c019e);

  static const PhysicalKeyboardKey launchControlPanel =
      PhysicalKeyboardKey(0x000c019f);

  static const PhysicalKeyboardKey selectTask = PhysicalKeyboardKey(0x000c01a2);

  static const PhysicalKeyboardKey launchDocuments =
      PhysicalKeyboardKey(0x000c01a7);

  static const PhysicalKeyboardKey spellCheck = PhysicalKeyboardKey(0x000c01ab);

  static const PhysicalKeyboardKey launchKeyboardLayout =
      PhysicalKeyboardKey(0x000c01ae);

  static const PhysicalKeyboardKey launchScreenSaver =
      PhysicalKeyboardKey(0x000c01b1);

  static const PhysicalKeyboardKey launchAudioBrowser =
      PhysicalKeyboardKey(0x000c01b7);

  static const PhysicalKeyboardKey launchAssistant =
      PhysicalKeyboardKey(0x000c01cb);

  static const PhysicalKeyboardKey newKey = PhysicalKeyboardKey(0x000c0201);

  static const PhysicalKeyboardKey close = PhysicalKeyboardKey(0x000c0203);

  static const PhysicalKeyboardKey save = PhysicalKeyboardKey(0x000c0207);

  static const PhysicalKeyboardKey print = PhysicalKeyboardKey(0x000c0208);

  static const PhysicalKeyboardKey browserSearch =
      PhysicalKeyboardKey(0x000c0221);

  static const PhysicalKeyboardKey browserHome =
      PhysicalKeyboardKey(0x000c0223);

  static const PhysicalKeyboardKey browserBack =
      PhysicalKeyboardKey(0x000c0224);

  static const PhysicalKeyboardKey browserForward =
      PhysicalKeyboardKey(0x000c0225);

  static const PhysicalKeyboardKey browserStop =
      PhysicalKeyboardKey(0x000c0226);

  static const PhysicalKeyboardKey browserRefresh =
      PhysicalKeyboardKey(0x000c0227);

  static const PhysicalKeyboardKey browserFavorites =
      PhysicalKeyboardKey(0x000c022a);

  static const PhysicalKeyboardKey zoomIn = PhysicalKeyboardKey(0x000c022d);

  static const PhysicalKeyboardKey zoomOut = PhysicalKeyboardKey(0x000c022e);

  static const PhysicalKeyboardKey zoomToggle = PhysicalKeyboardKey(0x000c0232);

  static const PhysicalKeyboardKey redo = PhysicalKeyboardKey(0x000c0279);

  static const PhysicalKeyboardKey mailReply = PhysicalKeyboardKey(0x000c0289);

  static const PhysicalKeyboardKey mailForward =
      PhysicalKeyboardKey(0x000c028b);

  static const PhysicalKeyboardKey mailSend = PhysicalKeyboardKey(0x000c028c);

  static const PhysicalKeyboardKey keyboardLayoutSelect =
      PhysicalKeyboardKey(0x000c029d);

  static const PhysicalKeyboardKey showAllWindows =
      PhysicalKeyboardKey(0x000c029f);

  static Iterable<PhysicalKeyboardKey> get knownPhysicalKeys =>
      _knownPhysicalKeys.values;

  // A list of all the predefined constant PhysicalKeyboardKeys so that they
  // can be searched.
  static const Map<int, PhysicalKeyboardKey> _knownPhysicalKeys =
      <int, PhysicalKeyboardKey>{
    0x00000010: hyper,
    0x00000011: superKey,
    0x00000012: fn,
    0x00000013: fnLock,
    0x00000014: suspend,
    0x00000015: resume,
    0x00000016: turbo,
    0x00000017: privacyScreenToggle,
    0x00000018: microphoneMuteToggle,
    0x00010082: sleep,
    0x00010083: wakeUp,
    0x000100b5: displayToggleIntExt,
    0x0005ff01: gameButton1,
    0x0005ff02: gameButton2,
    0x0005ff03: gameButton3,
    0x0005ff04: gameButton4,
    0x0005ff05: gameButton5,
    0x0005ff06: gameButton6,
    0x0005ff07: gameButton7,
    0x0005ff08: gameButton8,
    0x0005ff09: gameButton9,
    0x0005ff0a: gameButton10,
    0x0005ff0b: gameButton11,
    0x0005ff0c: gameButton12,
    0x0005ff0d: gameButton13,
    0x0005ff0e: gameButton14,
    0x0005ff0f: gameButton15,
    0x0005ff10: gameButton16,
    0x0005ff11: gameButtonA,
    0x0005ff12: gameButtonB,
    0x0005ff13: gameButtonC,
    0x0005ff14: gameButtonLeft1,
    0x0005ff15: gameButtonLeft2,
    0x0005ff16: gameButtonMode,
    0x0005ff17: gameButtonRight1,
    0x0005ff18: gameButtonRight2,
    0x0005ff19: gameButtonSelect,
    0x0005ff1a: gameButtonStart,
    0x0005ff1b: gameButtonThumbLeft,
    0x0005ff1c: gameButtonThumbRight,
    0x0005ff1d: gameButtonX,
    0x0005ff1e: gameButtonY,
    0x0005ff1f: gameButtonZ,
    0x00070000: usbReserved,
    0x00070001: usbErrorRollOver,
    0x00070002: usbPostFail,
    0x00070003: usbErrorUndefined,
    0x00070004: keyA,
    0x00070005: keyB,
    0x00070006: keyC,
    0x00070007: keyD,
    0x00070008: keyE,
    0x00070009: keyF,
    0x0007000a: keyG,
    0x0007000b: keyH,
    0x0007000c: keyI,
    0x0007000d: keyJ,
    0x0007000e: keyK,
    0x0007000f: keyL,
    0x00070010: keyM,
    0x00070011: keyN,
    0x00070012: keyO,
    0x00070013: keyP,
    0x00070014: keyQ,
    0x00070015: keyR,
    0x00070016: keyS,
    0x00070017: keyT,
    0x00070018: keyU,
    0x00070019: keyV,
    0x0007001a: keyW,
    0x0007001b: keyX,
    0x0007001c: keyY,
    0x0007001d: keyZ,
    0x0007001e: digit1,
    0x0007001f: digit2,
    0x00070020: digit3,
    0x00070021: digit4,
    0x00070022: digit5,
    0x00070023: digit6,
    0x00070024: digit7,
    0x00070025: digit8,
    0x00070026: digit9,
    0x00070027: digit0,
    0x00070028: enter,
    0x00070029: escape,
    0x0007002a: backspace,
    0x0007002b: tab,
    0x0007002c: space,
    0x0007002d: minus,
    0x0007002e: equal,
    0x0007002f: bracketLeft,
    0x00070030: bracketRight,
    0x00070031: backslash,
    0x00070033: semicolon,
    0x00070034: quote,
    0x00070035: backquote,
    0x00070036: comma,
    0x00070037: period,
    0x00070038: slash,
    0x00070039: capsLock,
    0x0007003a: f1,
    0x0007003b: f2,
    0x0007003c: f3,
    0x0007003d: f4,
    0x0007003e: f5,
    0x0007003f: f6,
    0x00070040: f7,
    0x00070041: f8,
    0x00070042: f9,
    0x00070043: f10,
    0x00070044: f11,
    0x00070045: f12,
    0x00070046: printScreen,
    0x00070047: scrollLock,
    0x00070048: pause,
    0x00070049: insert,
    0x0007004a: home,
    0x0007004b: pageUp,
    0x0007004c: delete,
    0x0007004d: end,
    0x0007004e: pageDown,
    0x0007004f: arrowRight,
    0x00070050: arrowLeft,
    0x00070051: arrowDown,
    0x00070052: arrowUp,
    0x00070053: numLock,
    0x00070054: numpadDivide,
    0x00070055: numpadMultiply,
    0x00070056: numpadSubtract,
    0x00070057: numpadAdd,
    0x00070058: numpadEnter,
    0x00070059: numpad1,
    0x0007005a: numpad2,
    0x0007005b: numpad3,
    0x0007005c: numpad4,
    0x0007005d: numpad5,
    0x0007005e: numpad6,
    0x0007005f: numpad7,
    0x00070060: numpad8,
    0x00070061: numpad9,
    0x00070062: numpad0,
    0x00070063: numpadDecimal,
    0x00070064: intlBackslash,
    0x00070065: contextMenu,
    0x00070066: power,
    0x00070067: numpadEqual,
    0x00070068: f13,
    0x00070069: f14,
    0x0007006a: f15,
    0x0007006b: f16,
    0x0007006c: f17,
    0x0007006d: f18,
    0x0007006e: f19,
    0x0007006f: f20,
    0x00070070: f21,
    0x00070071: f22,
    0x00070072: f23,
    0x00070073: f24,
    0x00070074: open,
    0x00070075: help,
    0x00070077: select,
    0x00070079: again,
    0x0007007a: undo,
    0x0007007b: cut,
    0x0007007c: copy,
    0x0007007d: paste,
    0x0007007e: find,
    0x0007007f: audioVolumeMute,
    0x00070080: audioVolumeUp,
    0x00070081: audioVolumeDown,
    0x00070085: numpadComma,
    0x00070087: intlRo,
    0x00070088: kanaMode,
    0x00070089: intlYen,
    0x0007008a: convert,
    0x0007008b: nonConvert,
    0x00070090: lang1,
    0x00070091: lang2,
    0x00070092: lang3,
    0x00070093: lang4,
    0x00070094: lang5,
    0x0007009b: abort,
    0x000700a3: props,
    0x000700b6: numpadParenLeft,
    0x000700b7: numpadParenRight,
    0x000700bb: numpadBackspace,
    0x000700d0: numpadMemoryStore,
    0x000700d1: numpadMemoryRecall,
    0x000700d2: numpadMemoryClear,
    0x000700d3: numpadMemoryAdd,
    0x000700d4: numpadMemorySubtract,
    0x000700d7: numpadSignChange,
    0x000700d8: numpadClear,
    0x000700d9: numpadClearEntry,
    0x000700e0: controlLeft,
    0x000700e1: shiftLeft,
    0x000700e2: altLeft,
    0x000700e3: metaLeft,
    0x000700e4: controlRight,
    0x000700e5: shiftRight,
    0x000700e6: altRight,
    0x000700e7: metaRight,
    0x000c0060: info,
    0x000c0061: closedCaptionToggle,
    0x000c006f: brightnessUp,
    0x000c0070: brightnessDown,
    0x000c0072: brightnessToggle,
    0x000c0073: brightnessMinimum,
    0x000c0074: brightnessMaximum,
    0x000c0075: brightnessAuto,
    0x000c0079: kbdIllumUp,
    0x000c007a: kbdIllumDown,
    0x000c0083: mediaLast,
    0x000c008c: launchPhone,
    0x000c008d: programGuide,
    0x000c0094: exit,
    0x000c009c: channelUp,
    0x000c009d: channelDown,
    0x000c00b0: mediaPlay,
    0x000c00b1: mediaPause,
    0x000c00b2: mediaRecord,
    0x000c00b3: mediaFastForward,
    0x000c00b4: mediaRewind,
    0x000c00b5: mediaTrackNext,
    0x000c00b6: mediaTrackPrevious,
    0x000c00b7: mediaStop,
    0x000c00b8: eject,
    0x000c00cd: mediaPlayPause,
    0x000c00cf: speechInputToggle,
    0x000c00e5: bassBoost,
    0x000c0183: mediaSelect,
    0x000c0184: launchWordProcessor,
    0x000c0186: launchSpreadsheet,
    0x000c018a: launchMail,
    0x000c018d: launchContacts,
    0x000c018e: launchCalendar,
    0x000c0192: launchApp2,
    0x000c0194: launchApp1,
    0x000c0196: launchInternetBrowser,
    0x000c019c: logOff,
    0x000c019e: lockScreen,
    0x000c019f: launchControlPanel,
    0x000c01a2: selectTask,
    0x000c01a7: launchDocuments,
    0x000c01ab: spellCheck,
    0x000c01ae: launchKeyboardLayout,
    0x000c01b1: launchScreenSaver,
    0x000c01b7: launchAudioBrowser,
    0x000c01cb: launchAssistant,
    0x000c0201: newKey,
    0x000c0203: close,
    0x000c0207: save,
    0x000c0208: print,
    0x000c0221: browserSearch,
    0x000c0223: browserHome,
    0x000c0224: browserBack,
    0x000c0225: browserForward,
    0x000c0226: browserStop,
    0x000c0227: browserRefresh,
    0x000c022a: browserFavorites,
    0x000c022d: zoomIn,
    0x000c022e: zoomOut,
    0x000c0232: zoomToggle,
    0x000c0279: redo,
    0x000c0289: mailReply,
    0x000c028b: mailForward,
    0x000c028c: mailSend,
    0x000c029d: keyboardLayoutSelect,
    0x000c029f: showAllWindows,
  };

  static const Map<int, String> _debugNames = kReleaseMode
      ? <int, String>{}
      : <int, String>{
          0x00000010: 'Hyper',
          0x00000011: 'Super Key',
          0x00000012: 'Fn',
          0x00000013: 'Fn Lock',
          0x00000014: 'Suspend',
          0x00000015: 'Resume',
          0x00000016: 'Turbo',
          0x00000017: 'Privacy Screen Toggle',
          0x00000018: 'Microphone Mute Toggle',
          0x00010082: 'Sleep',
          0x00010083: 'Wake Up',
          0x000100b5: 'Display Toggle Int Ext',
          0x0005ff01: 'Game Button 1',
          0x0005ff02: 'Game Button 2',
          0x0005ff03: 'Game Button 3',
          0x0005ff04: 'Game Button 4',
          0x0005ff05: 'Game Button 5',
          0x0005ff06: 'Game Button 6',
          0x0005ff07: 'Game Button 7',
          0x0005ff08: 'Game Button 8',
          0x0005ff09: 'Game Button 9',
          0x0005ff0a: 'Game Button 10',
          0x0005ff0b: 'Game Button 11',
          0x0005ff0c: 'Game Button 12',
          0x0005ff0d: 'Game Button 13',
          0x0005ff0e: 'Game Button 14',
          0x0005ff0f: 'Game Button 15',
          0x0005ff10: 'Game Button 16',
          0x0005ff11: 'Game Button A',
          0x0005ff12: 'Game Button B',
          0x0005ff13: 'Game Button C',
          0x0005ff14: 'Game Button Left 1',
          0x0005ff15: 'Game Button Left 2',
          0x0005ff16: 'Game Button Mode',
          0x0005ff17: 'Game Button Right 1',
          0x0005ff18: 'Game Button Right 2',
          0x0005ff19: 'Game Button Select',
          0x0005ff1a: 'Game Button Start',
          0x0005ff1b: 'Game Button Thumb Left',
          0x0005ff1c: 'Game Button Thumb Right',
          0x0005ff1d: 'Game Button X',
          0x0005ff1e: 'Game Button Y',
          0x0005ff1f: 'Game Button Z',
          0x00070000: 'Usb Reserved',
          0x00070001: 'Usb Error Roll Over',
          0x00070002: 'Usb Post Fail',
          0x00070003: 'Usb Error Undefined',
          0x00070004: 'Key A',
          0x00070005: 'Key B',
          0x00070006: 'Key C',
          0x00070007: 'Key D',
          0x00070008: 'Key E',
          0x00070009: 'Key F',
          0x0007000a: 'Key G',
          0x0007000b: 'Key H',
          0x0007000c: 'Key I',
          0x0007000d: 'Key J',
          0x0007000e: 'Key K',
          0x0007000f: 'Key L',
          0x00070010: 'Key M',
          0x00070011: 'Key N',
          0x00070012: 'Key O',
          0x00070013: 'Key P',
          0x00070014: 'Key Q',
          0x00070015: 'Key R',
          0x00070016: 'Key S',
          0x00070017: 'Key T',
          0x00070018: 'Key U',
          0x00070019: 'Key V',
          0x0007001a: 'Key W',
          0x0007001b: 'Key X',
          0x0007001c: 'Key Y',
          0x0007001d: 'Key Z',
          0x0007001e: 'Digit 1',
          0x0007001f: 'Digit 2',
          0x00070020: 'Digit 3',
          0x00070021: 'Digit 4',
          0x00070022: 'Digit 5',
          0x00070023: 'Digit 6',
          0x00070024: 'Digit 7',
          0x00070025: 'Digit 8',
          0x00070026: 'Digit 9',
          0x00070027: 'Digit 0',
          0x00070028: 'Enter',
          0x00070029: 'Escape',
          0x0007002a: 'Backspace',
          0x0007002b: 'Tab',
          0x0007002c: 'Space',
          0x0007002d: 'Minus',
          0x0007002e: 'Equal',
          0x0007002f: 'Bracket Left',
          0x00070030: 'Bracket Right',
          0x00070031: 'Backslash',
          0x00070033: 'Semicolon',
          0x00070034: 'Quote',
          0x00070035: 'Backquote',
          0x00070036: 'Comma',
          0x00070037: 'Period',
          0x00070038: 'Slash',
          0x00070039: 'Caps Lock',
          0x0007003a: 'F1',
          0x0007003b: 'F2',
          0x0007003c: 'F3',
          0x0007003d: 'F4',
          0x0007003e: 'F5',
          0x0007003f: 'F6',
          0x00070040: 'F7',
          0x00070041: 'F8',
          0x00070042: 'F9',
          0x00070043: 'F10',
          0x00070044: 'F11',
          0x00070045: 'F12',
          0x00070046: 'Print Screen',
          0x00070047: 'Scroll Lock',
          0x00070048: 'Pause',
          0x00070049: 'Insert',
          0x0007004a: 'Home',
          0x0007004b: 'Page Up',
          0x0007004c: 'Delete',
          0x0007004d: 'End',
          0x0007004e: 'Page Down',
          0x0007004f: 'Arrow Right',
          0x00070050: 'Arrow Left',
          0x00070051: 'Arrow Down',
          0x00070052: 'Arrow Up',
          0x00070053: 'Num Lock',
          0x00070054: 'Numpad Divide',
          0x00070055: 'Numpad Multiply',
          0x00070056: 'Numpad Subtract',
          0x00070057: 'Numpad Add',
          0x00070058: 'Numpad Enter',
          0x00070059: 'Numpad 1',
          0x0007005a: 'Numpad 2',
          0x0007005b: 'Numpad 3',
          0x0007005c: 'Numpad 4',
          0x0007005d: 'Numpad 5',
          0x0007005e: 'Numpad 6',
          0x0007005f: 'Numpad 7',
          0x00070060: 'Numpad 8',
          0x00070061: 'Numpad 9',
          0x00070062: 'Numpad 0',
          0x00070063: 'Numpad Decimal',
          0x00070064: 'Intl Backslash',
          0x00070065: 'Context Menu',
          0x00070066: 'Power',
          0x00070067: 'Numpad Equal',
          0x00070068: 'F13',
          0x00070069: 'F14',
          0x0007006a: 'F15',
          0x0007006b: 'F16',
          0x0007006c: 'F17',
          0x0007006d: 'F18',
          0x0007006e: 'F19',
          0x0007006f: 'F20',
          0x00070070: 'F21',
          0x00070071: 'F22',
          0x00070072: 'F23',
          0x00070073: 'F24',
          0x00070074: 'Open',
          0x00070075: 'Help',
          0x00070077: 'Select',
          0x00070079: 'Again',
          0x0007007a: 'Undo',
          0x0007007b: 'Cut',
          0x0007007c: 'Copy',
          0x0007007d: 'Paste',
          0x0007007e: 'Find',
          0x0007007f: 'Audio Volume Mute',
          0x00070080: 'Audio Volume Up',
          0x00070081: 'Audio Volume Down',
          0x00070085: 'Numpad Comma',
          0x00070087: 'Intl Ro',
          0x00070088: 'Kana Mode',
          0x00070089: 'Intl Yen',
          0x0007008a: 'Convert',
          0x0007008b: 'Non Convert',
          0x00070090: 'Lang 1',
          0x00070091: 'Lang 2',
          0x00070092: 'Lang 3',
          0x00070093: 'Lang 4',
          0x00070094: 'Lang 5',
          0x0007009b: 'Abort',
          0x000700a3: 'Props',
          0x000700b6: 'Numpad Paren Left',
          0x000700b7: 'Numpad Paren Right',
          0x000700bb: 'Numpad Backspace',
          0x000700d0: 'Numpad Memory Store',
          0x000700d1: 'Numpad Memory Recall',
          0x000700d2: 'Numpad Memory Clear',
          0x000700d3: 'Numpad Memory Add',
          0x000700d4: 'Numpad Memory Subtract',
          0x000700d7: 'Numpad Sign Change',
          0x000700d8: 'Numpad Clear',
          0x000700d9: 'Numpad Clear Entry',
          0x000700e0: 'Control Left',
          0x000700e1: 'Shift Left',
          0x000700e2: 'Alt Left',
          0x000700e3: 'Meta Left',
          0x000700e4: 'Control Right',
          0x000700e5: 'Shift Right',
          0x000700e6: 'Alt Right',
          0x000700e7: 'Meta Right',
          0x000c0060: 'Info',
          0x000c0061: 'Closed Caption Toggle',
          0x000c006f: 'Brightness Up',
          0x000c0070: 'Brightness Down',
          0x000c0072: 'Brightness Toggle',
          0x000c0073: 'Brightness Minimum',
          0x000c0074: 'Brightness Maximum',
          0x000c0075: 'Brightness Auto',
          0x000c0079: 'Kbd Illum Up',
          0x000c007a: 'Kbd Illum Down',
          0x000c0083: 'Media Last',
          0x000c008c: 'Launch Phone',
          0x000c008d: 'Program Guide',
          0x000c0094: 'Exit',
          0x000c009c: 'Channel Up',
          0x000c009d: 'Channel Down',
          0x000c00b0: 'Media Play',
          0x000c00b1: 'Media Pause',
          0x000c00b2: 'Media Record',
          0x000c00b3: 'Media Fast Forward',
          0x000c00b4: 'Media Rewind',
          0x000c00b5: 'Media Track Next',
          0x000c00b6: 'Media Track Previous',
          0x000c00b7: 'Media Stop',
          0x000c00b8: 'Eject',
          0x000c00cd: 'Media Play Pause',
          0x000c00cf: 'Speech Input Toggle',
          0x000c00e5: 'Bass Boost',
          0x000c0183: 'Media Select',
          0x000c0184: 'Launch Word Processor',
          0x000c0186: 'Launch Spreadsheet',
          0x000c018a: 'Launch Mail',
          0x000c018d: 'Launch Contacts',
          0x000c018e: 'Launch Calendar',
          0x000c0192: 'Launch App2',
          0x000c0194: 'Launch App1',
          0x000c0196: 'Launch Internet Browser',
          0x000c019c: 'Log Off',
          0x000c019e: 'Lock Screen',
          0x000c019f: 'Launch Control Panel',
          0x000c01a2: 'Select Task',
          0x000c01a7: 'Launch Documents',
          0x000c01ab: 'Spell Check',
          0x000c01ae: 'Launch Keyboard Layout',
          0x000c01b1: 'Launch Screen Saver',
          0x000c01b7: 'Launch Audio Browser',
          0x000c01cb: 'Launch Assistant',
          0x000c0201: 'New Key',
          0x000c0203: 'Close',
          0x000c0207: 'Save',
          0x000c0208: 'Print',
          0x000c0221: 'Browser Search',
          0x000c0223: 'Browser Home',
          0x000c0224: 'Browser Back',
          0x000c0225: 'Browser Forward',
          0x000c0226: 'Browser Stop',
          0x000c0227: 'Browser Refresh',
          0x000c022a: 'Browser Favorites',
          0x000c022d: 'Zoom In',
          0x000c022e: 'Zoom Out',
          0x000c0232: 'Zoom Toggle',
          0x000c0279: 'Redo',
          0x000c0289: 'Mail Reply',
          0x000c028b: 'Mail Forward',
          0x000c028c: 'Mail Send',
          0x000c029d: 'Keyboard Layout Select',
          0x000c029f: 'Show All Windows',
        };
}
